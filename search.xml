<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试题</title>
      <link href="/posts/100.html"/>
      <url>/posts/100.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1、HTML5的新特性？"><a href="#1、HTML5的新特性？" class="headerlink" title="1、HTML5的新特性？"></a>1、HTML5的新特性？</h3><ul><li>1、语义化标签，比如header、footer、nav、aside、article、section</li><li>2、音视频，比如audio、video</li><li>3、画布canvas、矢量图svg</li><li>3、画布，canvas的api有getContext、fillStyle、fillRect等</li><li>4、本地存储localStorage、sessionStorage</li><li>5、web worker<h3 id="2、语义化的好处？"><a href="#2、语义化的好处？" class="headerlink" title="2、语义化的好处？"></a>2、语义化的好处？</h3></li><li>1、代码分块清晰，便于维护</li><li>2、页面结构清晰，便于浏览器。搜索引擎解析</li><li>3、利于搜索引擎的爬取，利于SEO<h3 id="3、canvas的常用api有哪些？"><a href="#3、canvas的常用api有哪些？" class="headerlink" title="3、canvas的常用api有哪些？"></a>3、canvas的常用api有哪些？</h3></li><li>getContext：返回一个指定canvas的绘画环境对象</li><li>beginPath：开始绘制</li><li>moveTo：移动画笔位置</li><li>lineTo：用来画线段</li><li>stroke：用来实施绘制的操作</li><li>lineStyle：设置线段的样式</li><li>closePath：结束绘制<h3 id="4、web-worker有什么作用？应用场景有哪些？"><a href="#4、web-worker有什么作用？应用场景有哪些？" class="headerlink" title="4、web worker有什么作用？应用场景有哪些？"></a>4、web worker有什么作用？应用场景有哪些？</h3>开启一个子线程，且子线程的操作不受线程的影响</li><li>大数据处理</li><li>耗费时间较长的操作<h3 id="5、浏览器本地缓存localStorage与sessionStorage的区别？"><a href="#5、浏览器本地缓存localStorage与sessionStorage的区别？" class="headerlink" title="5、浏览器本地缓存localStorage与sessionStorage的区别？"></a>5、浏览器本地缓存localStorage与sessionStorage的区别？</h3></li><li>生命周期不同：前者一直存在浏览器，除非用户手动清除，后者生命周期结束于浏览器或者tab页的关闭</li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="1、有哪些新特性呢？"><a href="#1、有哪些新特性呢？" class="headerlink" title="1、有哪些新特性呢？"></a>1、有哪些新特性呢？</h3><p>flex、animation、transform、border-radius、box-shadow、opacity</p><h3 id="2、背景毛玻璃的效果如何实现呢？"><a href="#2、背景毛玻璃的效果如何实现呢？" class="headerlink" title="2、背景毛玻璃的效果如何实现呢？"></a>2、背景毛玻璃的效果如何实现呢？</h3><p>filter：blur()</p><h3 id="3、position有哪几种呢？"><a href="#3、position有哪几种呢？" class="headerlink" title="3、position有哪几种呢？"></a>3、position有哪几种呢？</h3><ul><li>static：默认</li><li>relative：相对于自身</li><li>absolute：相对于最近的一个非static的祖先级元素进行定位</li><li>fixed：相对于屏幕窗口进行定位</li><li>sticky：用来实现吸顶效果<h3 id="4、如何自己实现跟position：sticky的效果？"><a href="#4、如何自己实现跟position：sticky的效果？" class="headerlink" title="4、如何自己实现跟position：sticky的效果？"></a>4、如何自己实现跟position：sticky的效果？</h3>使用getBoundingClientRect或者IntersectionObserver计算指定元素位置，到达一定距离更改指定元素定位为fixed，从而实现sticky的效果<h3 id="5、重绘回流是什么呢？"><a href="#5、重绘回流是什么呢？" class="headerlink" title="5、重绘回流是什么呢？"></a>5、重绘回流是什么呢？</h3><a href="https://juejin.cn/post/6986416221323264030">文章链接</a><h3 id="6、怎么降低重绘回流的次数呢？"><a href="#6、怎么降低重绘回流的次数呢？" class="headerlink" title="6、怎么降低重绘回流的次数呢？"></a>6、怎么降低重绘回流的次数呢？</h3><a href="https://juejin.cn/post/6986416221323264030">文章链接</a><h3 id="7、flex布局如何更改主轴方向？"><a href="#7、flex布局如何更改主轴方向？" class="headerlink" title="7、flex布局如何更改主轴方向？"></a>7、flex布局如何更改主轴方向？</h3>设置flex-direction样式属性<h3 id="8、flex布局如何允许换行呢？"><a href="#8、flex布局如何允许换行呢？" class="headerlink" title="8、flex布局如何允许换行呢？"></a>8、flex布局如何允许换行呢？</h3>设置flex-wrap样式属性<h3 id="9、flex布局实现水平垂直据居中？"><a href="#9、flex布局实现水平垂直据居中？" class="headerlink" title="9、flex布局实现水平垂直据居中？"></a>9、flex布局实现水平垂直据居中？</h3>设置justify-content和align-items都为center<h3 id="10、flex：1的原理是什么呢？"><a href="#10、flex：1的原理是什么呢？" class="headerlink" title="10、flex：1的原理是什么呢？"></a>10、flex：1的原理是什么呢？</h3>flex-grow 、flex-shrink 、flex-basis这三个样式的合集，全写状态为flex:0 1 auto，简写为flex: 1<h3 id="11、rem与em的区别是什么呢？"><a href="#11、rem与em的区别是什么呢？" class="headerlink" title="11、rem与em的区别是什么呢？"></a>11、rem与em的区别是什么呢？</h3></li><li>rem：相对于标签的font-size去决定大小，例如html标签font-size为14px，则2rem === 28px</li><li>em：相对于自身的font-size去决定大小，自身没有font-size则继承祖先级元素的font-size</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1、原型链是什么呢？有什么作用吗"><a href="#1、原型链是什么呢？有什么作用吗" class="headerlink" title="1、原型链是什么呢？有什么作用吗"></a>1、原型链是什么呢？有什么作用吗</h3><ul><li>原型链：原型链是一条对象隐式原型不断往上指向的一条指向链，尽头是Object的隐式原型，也就是null</li><li>作用：构造函数原型上的东西可以让实例们共享，从而节省了空间<h3 id="2、闭包是什么？有什么优缺点"><a href="#2、闭包是什么？有什么优缺点" class="headerlink" title="2、闭包是什么？有什么优缺点"></a>2、闭包是什么？有什么优缺点</h3>闭包是一个能让函数外部访问到函数内部的一个函数</li><li>优点是：延长函数内部变量的寿命，使函数外部能访问到函数内部</li><li>缺点是：滥用闭包导致内存溢出，页面卡顿<h3 id="3、JavaScript总共有几种数据类型？"><a href="#3、JavaScript总共有几种数据类型？" class="headerlink" title="3、JavaScript总共有几种数据类型？"></a>3、JavaScript总共有几种数据类型？</h3>字符串、布尔值、数值、undefined、null、object、symbol、bigInt<h3 id="4、JavaScript判断类型的方式是什么？"><a href="#4、JavaScript判断类型的方式是什么？" class="headerlink" title="4、JavaScript判断类型的方式是什么？"></a>4、JavaScript判断类型的方式是什么？</h3></li><li>typeof：只能判断 字符串、布尔值、数值、undefined、function、object、symbol、bigInt，不能区分判断 数组、null、对象</li><li>A instanceof B：判断A是否为B的实例对象，从而判断A是否为B类型</li><li>Object.prototype.toString.call()：可以判断所有的数据类型<h3 id="6、JavaScript不同类型的存储方式有何区别？"><a href="#6、JavaScript不同类型的存储方式有何区别？" class="headerlink" title="6、JavaScript不同类型的存储方式有何区别？"></a>6、JavaScript不同类型的存储方式有何区别？</h3>普遍认为</li><li>基础数据类型存于栈内存</li><li>引用数据类型存于堆内存<br>我认为</li><li>所有数据都存于堆内存，栈内存只存指针<h3 id="7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？"><a href="#7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？" class="headerlink" title="7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？"></a>7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？</h3>所以说我觉得所有数据都存于堆内存，毕竟栈内存容量有限。<h3 id="8、call、apply、bind的区别？"><a href="#8、call、apply、bind的区别？" class="headerlink" title="8、call、apply、bind的区别？"></a>8、call、apply、bind的区别？</h3></li><li>call于apply的区别在于传参，前者直接传参，后者传一个数组</li><li>bind传参后不立即执行，而是会返回一个函数，这个函数可以继续传参，且执行（bind函数可以分两次传参）<h3 id="9、bind返回的函数能作为构造函数吗？"><a href="#9、bind返回的函数能作为构造函数吗？" class="headerlink" title="9、bind返回的函数能作为构造函数吗？"></a>9、bind返回的函数能作为构造函数吗？</h3>不能哦，会报错的<h3 id="10、赋值、深拷贝与浅拷贝有什么不同？"><a href="#10、赋值、深拷贝与浅拷贝有什么不同？" class="headerlink" title="10、赋值、深拷贝与浅拷贝有什么不同？"></a>10、赋值、深拷贝与浅拷贝有什么不同？</h3></li><li>赋值：赋值指针指向，还是用的同一个内存空间</li><li>浅拷贝：只拷贝第一层</li><li>深拷贝：所有层都会进行拷贝<h3 id="11、怎么判断一个对象有环引用呢？"><a href="#11、怎么判断一个对象有环引用呢？" class="headerlink" title="11、怎么判断一个对象有环引用呢？"></a>11、怎么判断一个对象有环引用呢？</h3>定义一个空数组，且对于目标对象进行递归，每次都判断递归项是否为对象，是的话放进数组，且每次判断属性值是否在数组里，在的话说明环引用了<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cycleDetector</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">function</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> temp <span class="token operator">=</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> temp <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>                <span class="token function">cycle</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">cycle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> flag<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="1、let、const的暂时性死区问题？"><a href="#1、let、const的暂时性死区问题？" class="headerlink" title="1、let、const的暂时性死区问题？"></a>1、let、const的暂时性死区问题？</h3><p>在一个作用域里如果存在let、const定义的一个变量之前使用该变量，则报错“cannot access xx before initialization”</p><h3 id="2、Promise的then为什么可以链式调用？"><a href="#2、Promise的then为什么可以链式调用？" class="headerlink" title="2、Promise的then为什么可以链式调用？"></a>2、Promise的then为什么可以链式调用？</h3><p>Promise的then方法返回一个新的Promise对象，保证了then方法可以进行链式调用</p><h3 id="3、async-await的用法？"><a href="#3、async-await的用法？" class="headerlink" title="3、async/await的用法？"></a>3、async/await的用法？</h3><ul><li>async/await的作用是：以同步的方式执行异步操作，实现排队效果</li><li>async：async函数执行返回一个Promise</li><li>await：await后接Promise则会等待Promise返回结果，接普通函数执行则会接收返回结果</li><li>await只能在async中使用，但是浏览器调试中await可单独使用<h3 id="4、Class的静态属性、继承？"><a href="#4、Class的静态属性、继承？" class="headerlink" title="4、Class的静态属性、继承？"></a>4、Class的静态属性、继承？</h3></li><li>静态属性：static关键字定义的变量属性，只能通过Class构造函数的属性的方式去访问</li><li>继承：使用 Child extends Father {}，且配合super对象，完成继承<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2></li></ul><h3 id="1、Vue与React的区别在哪？"><a href="#1、Vue与React的区别在哪？" class="headerlink" title="1、Vue与React的区别在哪？"></a>1、Vue与React的区别在哪？</h3><p>比较的是Vue2<br>相同点：</p><ul><li>1.都使用了虚拟dom</li><li>2.组件化开发</li><li>3.都是单向数据流(父子组件之间，不建议子修改父传下来的数据)</li><li>4.都支持服务端渲染<br>不同点：</li><li>1.React的JSX，Vue的template</li><li>2.数据变化，React手动(setState)，Vue自动(初始化已响应式处理，Object.defineProperty，Proxy)</li><li>3.React单向绑定，Vue双向绑定</li><li>4.React的Redux、mobx，Vue的Vuex、pinia</li></ul><h3 id="2、computed与watch的区别？"><a href="#2、computed与watch的区别？" class="headerlink" title="2、computed与watch的区别？"></a>2、computed与watch的区别？</h3><ul><li>computed：多对一，多个值的变化决定一个目标值的变化</li><li>watch：一对多，一个值的变化，引起多个目标值的变化<h3 id="3、Vue的生命周期介绍一下？"><a href="#3、Vue的生命周期介绍一下？" class="headerlink" title="3、Vue的生命周期介绍一下？"></a>3、Vue的生命周期介绍一下？</h3><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/892fde0e56324868921d0e924c84858a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><h3 id="4、Vue的实例加载完成在哪个生命周期呢？"><a href="#4、Vue的实例加载完成在哪个生命周期呢？" class="headerlink" title="4、Vue的实例加载完成在哪个生命周期呢？"></a>4、Vue的实例加载完成在哪个生命周期呢？</h3>beforeCreated<h3 id="5、Vue的真实dom挂载完成在哪个生命周期呢？"><a href="#5、Vue的真实dom挂载完成在哪个生命周期呢？" class="headerlink" title="5、Vue的真实dom挂载完成在哪个生命周期呢？"></a>5、Vue的真实dom挂载完成在哪个生命周期呢？</h3>mounted<h3 id="6、数据更改如何获取最新DOM"><a href="#6、数据更改如何获取最新DOM" class="headerlink" title="6、数据更改如何获取最新DOM"></a>6、数据更改如何获取最新DOM</h3>nextTick<h3 id="7、路由有几种模式，有何区别？"><a href="#7、路由有几种模式，有何区别？" class="headerlink" title="7、路由有几种模式，有何区别？"></a>7、路由有几种模式，有何区别？</h3></li><li>hash模式：监听url中hash的变化来实现不同页面的展示，链接带#</li><li>history模式：url中不带#，利用HTML5的history.pushState方法进行不刷新跳转页面，但需要后端配合404时的重定向</li><li>abstract：使用在非浏览器的环境，例如node环境<h3 id="8、路由有哪些钩子函数？"><a href="#8、路由有哪些钩子函数？" class="headerlink" title="8、路由有哪些钩子函数？"></a>8、路由有哪些钩子函数？</h3>全局钩子</li><li>beforeEach：跳转路由前<ul><li>to：将要跳转进入的路由对象</li><li>from：将要离开的路由对象</li><li>next：一个方法，执行则完成跳转</li></ul></li><li>afterEach：跳转路由后<ul><li>to：将要跳转进入的路由对象</li></ul></li></ul><p>路由独享钩子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">routes<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/xxx'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> xxx<span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件内路由钩子</p><ul><li>beforeRouteEnter(to, from, next)：跳转路由渲染组件时触发</li><li>beforeRouteUpdate(to, from, next)：跳转路由且组件被复用时触发</li><li>beforeRouteLeave(to, from, next)：跳转路由且离开组件时出触发</li></ul><p>转载b站up—林三心</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><pre class="line-numbers language-none"><code class="language-none">标题：（注意#后面要加一个空格！）# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><pre class="line-numbers language-none"><code class="language-none">斜体字、粗体字、删除内容、短文字：*斜体字***粗体字*****斜体加粗体***~~删除的内容~~ （1.效果看下面）_下划线_ （2.）`短文字` （3.会有灰色背景）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.<del>我是删除的内容</del></p><p>2.<em>我是下划线</em></p><p>3.<code>短文字</code></p><h2 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h2><pre class="line-numbers language-none"><code class="language-none">添加注释：（可不加空格）&gt;注释标题&gt;添加引用内容&gt;&gt;多级注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我是标题</p><blockquote><p>我是注释内容</p><blockquote><blockquote><p>我是多级注释</p></blockquote></blockquote></blockquote></blockquote><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><pre class="line-numbers language-none"><code class="language-none">无序列表：（必加空格）* 无序列表1* 无序列表2* 无序列表2.1（这里按tab键，使层级更加清晰）* 无序列表2.2（这里按tab键，使层级更加清晰）有序列表：（1.然后空格）1. 有序列表12. 有序列表2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无序："><a href="#无序：" class="headerlink" title="无序："></a>无序：</h3><ul><li>我是无序列表1</li><li>我是无序列表2<ul><li>我是无序列表2.1</li><li>我是无序列表2.2</li></ul></li></ul><h3 id="有序："><a href="#有序：" class="headerlink" title="有序："></a>有序：</h3><ol><li><p>我是有序列表1</p></li><li><p> 我是有序列表2</p></li></ol><h2 id="五、复选框"><a href="#五、复选框" class="headerlink" title="五、复选框"></a>五、复选框</h2><pre class="line-numbers language-none"><code class="language-none">复选框：(-然后空格，然后在中括号里面加一个空格，在到外面加空格)- [] 待办事项1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> </li></ul><h2 id="六、分割线"><a href="#六、分割线" class="headerlink" title="六、分割线"></a>六、分割线</h2><pre class="line-numbers language-none"><code class="language-none">分割线：***或者___ (三个下划线)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><hr><h2 id="七、插入代码"><a href="#七、插入代码" class="headerlink" title="七、插入代码"></a>七、插入代码</h2><pre class="line-numbers language-none"><code class="language-none">插入代码：(三个漂号 或 加上语言类型)```或```javascript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、插入图片"><a href="#八、插入图片" class="headerlink" title="八、插入图片"></a>八、插入图片</h2><pre class="line-numbers language-none"><code class="language-none">图片：方式一： 直接拖进来(图片是存在本地的，别人看你文档是看不到你图片的！)方式二： ![图片名称](图片地址url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.imagehub.cc/images/2022/08/27/-4k3840x2160_.jpg" alt="-4k3840x2160_.jpg"></p><h2 id="九、插入网页链接"><a href="#九、插入网页链接" class="headerlink" title="九、插入网页链接"></a>九、插入网页链接</h2><pre class="line-numbers language-none"><code class="language-none">网页链接：先在[]中输入名字,再到括号中输入网址。[链接某个网页]()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://largefan.github.io/">大风扇的博客</a></p><h2 id="十、表格-麻烦，直接右键创建就好了"><a href="#十、表格-麻烦，直接右键创建就好了" class="headerlink" title="十、表格(麻烦，直接右键创建就好了)"></a>十、表格(<font color="red">麻烦，直接右键创建就好了</font>)</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">表格：标题|标题|标题:--:|:--|--:第一个格子|第二个格子|第三个格子第一个内容|第二个内容|第三个内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">标题</th><th align="left">标题</th><th align="right">标题</th></tr></thead><tbody><tr><td align="center">第一个格子</td><td align="left">第二个格子</td><td align="right">第三个格子</td></tr><tr><td align="center">第一个内容</td><td align="left">第二个内容</td><td align="right">第三个内容</td></tr></tbody></table><h2 id="十一、公式"><a href="#十一、公式" class="headerlink" title="十一、公式"></a>十一、公式</h2><pre class="line-numbers language-none"><code class="language-none">公式：$$这里写公式$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>2^3+C_2^2=猜一猜？<br>$$</p><h2 id="十二、目录"><a href="#十二、目录" class="headerlink" title="十二、目录"></a>十二、目录</h2><pre class="line-numbers language-none"><code class="language-none">目录：[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 搭建个人博客</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-github-搭建个人博客"><a href="#hexo-github-搭建个人博客" class="headerlink" title="hexo + github 搭建个人博客"></a>hexo + github 搭建个人博客</h2><h3 id="1、检查是否安装node、npm、git"><a href="#1、检查是否安装node、npm、git" class="headerlink" title="1、检查是否安装node、npm、git"></a>1、检查是否安装node、npm、git</h3><ul><li>node -v</li><li>npm -v</li><li>git –version</li></ul><h3 id="2、Hexo下载"><a href="#2、Hexo下载" class="headerlink" title="2、Hexo下载"></a>2、Hexo下载</h3><ul><li>npm install hexo-cli -g</li><li>hexo -v</li></ul><h3 id="3、搭建仓库"><a href="#3、搭建仓库" class="headerlink" title="3、搭建仓库"></a>3、搭建仓库</h3><ul><li>仓库名字 要与 账号用户名字一致</li></ul><img src="https://img-blog.csdnimg.cn/85702601d6cd4ed093b7eef6009c60f7.png" style="zoom:67%;"><h3 id="4、创建仓库后，生成ssh-keys"><a href="#4、创建仓库后，生成ssh-keys" class="headerlink" title="4、创建仓库后，生成ssh keys"></a>4、创建仓库后，生成ssh keys</h3><ul><li><p><strong>如未生成过</strong>，则在git bash里输入：ssh-keygen -t rsa -C “邮箱地址”</p></li><li><p>之前<strong>已经生成过</strong>，如图：</p></li></ul><img src="https://img-blog.csdnimg.cn/ff0082f6bba944ac81011df43ac303ec.png" style="zoom:67%;"><ul><li>把公钥填入这里</li></ul><img src="https://img-blog.csdnimg.cn/94ff923ac6204a1ab24d7215af3ce6cc.png" style="zoom:67%;"><h3 id="5、本地生成博客内容"><a href="#5、本地生成博客内容" class="headerlink" title="5、本地生成博客内容"></a>5、本地生成博客内容</h3><ul><li><p>在本地创建一个文件夹**(此时里面什么都没)**，右键打开git bash</p></li><li><p>输入：npm install -g hexo   <!--意思是安装hexo--></p></li><li><p>hexo init  <!--初始化后里面出现躯壳 如图--></p><img src="https://img-blog.csdnimg.cn/a09175981787444cbc16083a6ca365bd.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/46311117c2ad4b5c8fac4602fdfd71a5.png" style="zoom:67%;"></li><li><p>hexo s <code>&lt;!--启动服务器输入：http://localhost:4000/--&gt;</code></p></li><li><p>npm run server <!--启动本地服务器--></p></li></ul><img src="https://img-blog.csdnimg.cn/68e484438dd64bce80c22933481deb7a.png" style="zoom:67%;"><h3 id="6、把博客部署到github"><a href="#6、把博客部署到github" class="headerlink" title="6、把博客部署到github"></a>6、把博客部署到github</h3><ul><li><pre><code>deploy:   type: git   repository: https://github.com/largefan/largefan.github.io.git   branch: main</code></pre></li></ul>  <img src="https://img-blog.csdnimg.cn/dcd838b45e374dc3b67781c30c4e59ee.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/930a94ed832d406eb7202a19f9273399.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/7301aa70bc8a439f8ac62d5b023f9e2b.png" style="zoom:67%;"><ul><li><p>修改完成后，右键打开git bash</p></li><li><p>安装hexo-deployer-git 自动部署发布工具：npm install hexo-deployer-git –save</p></li><li><p>建议先 hexo clean 清理一下</p></li><li><p>然后输入生成页面命令： hexo g</p></li><li><p>然后把本地文件上传到github仓库 命令：hexo d</p></li><li><p>然后令牌没问题就可以访问了：<a href="https://largefan.github.io/">https://largefan.github.io/</a></p><img src="https://img-blog.csdnimg.cn/3857a5af8a48483388b66305f54aadde.png" style="zoom:67%;"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
