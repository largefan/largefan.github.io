<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大风扇</title>
  
  <subtitle>largefan</subtitle>
  <link href="https://largefan.github.io/atom.xml" rel="self"/>
  
  <link href="https://largefan.github.io/"/>
  <updated>2022-09-12T16:23:24.985Z</updated>
  <id>https://largefan.github.io/</id>
  
  <author>
    <name>largefan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6模块化</title>
    <link href="https://largefan.github.io/posts/11.html"/>
    <id>https://largefan.github.io/posts/11.html</id>
    <published>2022-06-30T16:04:20.000Z</published>
    <updated>2022-09-12T16:23:24.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、导出语句"><a href="#一、导出语句" class="headerlink" title="一、导出语句"></a>一、导出语句</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">导出语句（即暴露出去）语法：<span class="token keyword">export</span> <span class="token keyword">default</span> 变量名<span class="token punctuation">;</span><span class="token keyword">import</span> 变量名 <span class="token keyword">from</span> 路径<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="①export-default-—只能导出一个内容，这个内容可以是变量、函数、对象、类等。"><a href="#①export-default-—只能导出一个内容，这个内容可以是变量、函数、对象、类等。" class="headerlink" title="①export default —只能导出一个内容，这个内容可以是变量、函数、对象、类等。"></a><strong>①export default —只能导出一个内容，这个内容可以是变量、函数、对象、类等。</strong></h3><h4 id="1-导出变量"><a href="#1-导出变量" class="headerlink" title="1. 导出变量"></a>1. 导出变量</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">例子<span class="token number">1</span>：（导出一个变量或值）方式①：变量       <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">"小白"</span><span class="token punctuation">;</span>       <span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>方式②：值       <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"小白"</span><span class="token punctuation">;</span>注意：① 在<span class="token constant">HTML</span>文件中使用模块化语法，必须在script上加上 type<span class="token operator">=</span><span class="token string">"module"</span>；否则会报错。② 一个js文件只能用一次<span class="token keyword">export</span> <span class="token keyword">default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-导出函数"><a href="#2-导出函数" class="headerlink" title="2.导出函数"></a>2.导出函数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">例子<span class="token number">2</span>：（导出一个函数）<span class="token comment">// 导出方式1：</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方式111导出的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span><span class="token comment">// 导出方式2：</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方式222导出的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 导出方式3：</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方式333导出的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 导出方式4：</span><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"方式444导出的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-导出对象"><a href="#3-导出对象" class="headerlink" title="3. 导出对象"></a>3. 导出对象</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例3：（导出一个对象）</span><span class="token comment">// 导出方式1：</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span>    demo<span class="token operator">:</span><span class="token string">"导出方式111"</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> person<span class="token punctuation">;</span><span class="token comment">// 导出方式2：</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    demo<span class="token operator">:</span><span class="token string">"导出方式222"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-导出类"><a href="#4-导出类" class="headerlink" title="4. 导出类"></a>4. 导出类</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例4：（导出一个类）</span><span class="token comment">// 导出方式1：</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> person<span class="token punctuation">;</span><span class="token comment">// 导出方式2：</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②export"><a href="#②export" class="headerlink" title="②export"></a>②export</h3><h4 id="1-导出多个变量"><a href="#1-导出多个变量" class="headerlink" title="1.导出多个变量"></a>1.导出多个变量</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">① 导出多个变量：<span class="token comment">// 导出方式1：</span><span class="token keyword">export</span> <span class="token keyword">const</span> red <span class="token operator">=</span> <span class="token string">"红色"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> green <span class="token operator">=</span> <span class="token string">"绿色"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> blue <span class="token operator">=</span> <span class="token string">"蓝色"</span><span class="token punctuation">;</span><span class="token comment">// 导出方式2：</span><span class="token keyword">const</span> red <span class="token operator">=</span> <span class="token string">"红色"</span><span class="token punctuation">;</span><span class="token keyword">const</span> green <span class="token operator">=</span> <span class="token string">"绿色"</span><span class="token punctuation">;</span><span class="token keyword">const</span> blue <span class="token operator">=</span> <span class="token string">"蓝色"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>red<span class="token punctuation">,</span>green<span class="token punctuation">,</span>blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-导出多个函数"><a href="#2-导出多个函数" class="headerlink" title="2.导出多个函数"></a>2.导出多个函数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">②导出多个函数<span class="token comment">// 导出方式1：</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为export导出的是一个集合，所以为了与export导出内容的结构一致11对应，因此必须在import后面加上{}。只要用了export,导入时都要加{}</p><blockquote><p>注意：如果导出的是对象，那么export {red,green,blue};等价于export {red:red,green:green,blue:blue};</p></blockquote></blockquote><h2 id="二、导入语句"><a href="#二、导入语句" class="headerlink" title="二、导入语句"></a>二、导入语句</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">导入语句<span class="token operator">:</span>语法：<span class="token keyword">import</span> <span class="token punctuation">{</span>变量<span class="token number">1</span><span class="token punctuation">,</span>变量<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span>变量n<span class="token punctuation">}</span> <span class="token keyword">from</span> 路径<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-导入（import）时可-重新命名"><a href="#1-导入（import）时可-重新命名" class="headerlink" title="1. 导入（import）时可  重新命名"></a>1. <strong>导入（import）时可  重新命名</strong></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">① <span class="token keyword">export</span> <span class="token keyword">default</span>：（直接在<span class="token keyword">import</span>后面使用新的变量名。）<span class="token comment">//foo.js</span><span class="token keyword">const</span> red <span class="token operator">=</span> <span class="token string">"红色"</span><span class="token keyword">export</span> <span class="token keyword">default</span> red<span class="token punctuation">;</span><span class="token comment">//bar.js</span><span class="token keyword">import</span> myRed <span class="token keyword">from</span> <span class="token string">"./foo.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myRed<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">② <span class="token keyword">export</span>：（用<span class="token keyword">as</span>关键字来重新命名。）<span class="token comment">//foo.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> red <span class="token operator">=</span> <span class="token string">"红色"</span><span class="token punctuation">;</span><span class="token comment">//bar.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>red <span class="token keyword">as</span> myRed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myRed<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、深入了解"><a href="#三、深入了解" class="headerlink" title="三、深入了解"></a>三、深入了解</h2><h3 id="1-省略后缀名"><a href="#1-省略后缀名" class="headerlink" title="1. 省略后缀名"></a>1. 省略后缀名</h3><pre class="line-numbers language-none"><code class="language-none">在import导入时路径中的后缀名可以省略注意：    省略仅限于webpack、vue、react等；在HTML中引入了一个省略后缀文件是行不通的！！！即import foo from "./foo"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-export-default-和-export-可以混合使用"><a href="#2-export-default-和-export-可以混合使用" class="headerlink" title="2.export default 和 export 可以混合使用"></a>2.export default 和 export 可以混合使用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//foo.js</span><span class="token keyword">const</span> red <span class="token operator">=</span><span class="token string">"红色"</span><span class="token keyword">export</span> <span class="token keyword">default</span> red<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> black <span class="token operator">=</span><span class="token string">"黑色"</span><span class="token comment">//bar.js</span><span class="token keyword">import</span> red<span class="token punctuation">,</span><span class="token punctuation">{</span>black<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./foo.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-模块化中的路径和图片路径不一样！"><a href="#3-模块化中的路径和图片路径不一样！" class="headerlink" title="3. 模块化中的路径和图片路径不一样！"></a>3. 模块化中的路径和图片路径不一样！</h3><pre class="line-numbers language-none"><code class="language-none">import foo from "./foo.js"---这个是从当前文件所在目录导入foo.js，模块是自定义的，使用这种导入方式。import foo from "foo.js"---这个是在node_module导入foo.js，模块是npm安装的，使用这种导入方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-解决export-default不能使用解构赋值方法；因为-已经分给export了！"><a href="#4-解决export-default不能使用解构赋值方法；因为-已经分给export了！" class="headerlink" title="4.解决export default不能使用解构赋值方法；因为{}已经分给export了！"></a>4.解决export default不能使用解构赋值方法；因为{}已经分给export了！</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//foo.js</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>          name<span class="token operator">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>          age<span class="token operator">:</span><span class="token string">"24"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//bar.js</span><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">"./foo"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-模块化优点："><a href="#5-模块化优点：" class="headerlink" title="5.模块化优点："></a>5.模块化优点：</h3><h3 id="可读性和可维护性强，性能更好，集中到一个文件，只需发起一次http请求。"><a href="#可读性和可维护性强，性能更好，集中到一个文件，只需发起一次http请求。" class="headerlink" title="可读性和可维护性强，性能更好，集中到一个文件，只需发起一次http请求。"></a><code>可读性和可维护性强，性能更好，集中到一个文件，只需发起一次http请求。</code></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、导出语句&quot;&gt;&lt;a href=&quot;#一、导出语句&quot; class=&quot;headerlink&quot; title=&quot;一、导出语句&quot;&gt;&lt;/a&gt;一、导出语句&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-javascript&quot; data-langua</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ES6" scheme="https://largefan.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Express-写接口</title>
    <link href="https://largefan.github.io/posts/15.html"/>
    <id>https://largefan.github.io/posts/15.html</id>
    <published>2022-06-28T03:10:10.000Z</published>
    <updated>2022-09-12T16:51:09.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建基本的服务器："><a href="#一、创建基本的服务器：" class="headerlink" title="一、创建基本的服务器："></a>一、创建基本的服务器：</h3><p><img src="https://s1.imagehub.cc/images/2022/09/12/1c13fc89073422965.png" alt="1"></p><h3 id="二、-创建-API-路由模块："><a href="#二、-创建-API-路由模块：" class="headerlink" title="二、 创建 API 路由模块："></a>二、 创建 API 路由模块：</h3><p><img src="https://s1.imagehub.cc/images/2022/09/12/2..png" alt="2"></p><h3 id="三、编写-GET-接口："><a href="#三、编写-GET-接口：" class="headerlink" title="三、编写 GET 接口："></a>三、编写 GET 接口：</h3><p><img src="https://s1.imagehub.cc/images/2022/09/12/36415041fef24862f.png" alt="3"></p><h3 id="四、编写-POST-接口："><a href="#四、编写-POST-接口：" class="headerlink" title="四、编写 POST 接口："></a>四、编写 POST 接口：</h3><p><img src="https://s1.imagehub.cc/images/2022/09/12/4..png" alt="4"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、创建基本的服务器：&quot;&gt;&lt;a href=&quot;#一、创建基本的服务器：&quot; class=&quot;headerlink&quot; title=&quot;一、创建基本的服务器：&quot;&gt;&lt;/a&gt;一、创建基本的服务器：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s1.imagehub.cc/i</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Node" scheme="https://largefan.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>数据库语法</title>
    <link href="https://largefan.github.io/posts/16.html"/>
    <id>https://largefan.github.io/posts/16.html</id>
    <published>2022-06-27T19:41:00.000Z</published>
    <updated>2022-09-12T14:14:49.870Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>查询数据（select） 、插入数据（insert into） 、更新数据（update） 、删除数据（delete） ;</strong></p></li><li><p>where 条件、and 和 or 运算符、order by 排序、count(*) 函数</p></li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 一、select、insert into、update、delete--  * 把 users 表中所有的数据查询出来-- select * from users-- 从 users 表中把 username 和 password 对应的数据查询出来-- select username,password from users-- 向 users 表中，插入新数据：username的值为tony stark   password的值为 098123-- insert into users(username,password) values('tony stark','098123')-- select * from users-- 将 id为4的用户密码，更新成 888888-- update users set password='888888' where id=4-- 更新id为2的用户，把用户密码更新admin123 同时，把用户的状态更新为 1-- update users set password='admin123',status=1 where id=2-- select * from users-- 注意：千万不要忘记提供 where 条件，否则将导致误删整张表的数据！！！-- 删除 users 表中，id为4的用户-- delete from users where id=4-- select * from users-- 二、演示 where 子句的使用:-- 查询 users表 中 状态为1的数据-- select * from users where status=1-- 查询 users表 中 id大于等于2的数据-- select * from users where id&gt;=2-- 查询 users表 中 用户名不等于ls的数据-- select * from users where username&lt;&gt;'ls'-- 查询 users表 中 用户名不等于ls的数据(跟上面那一条语句，等价的)-- select * from users where username!='ls'-- 三、and(&amp;&amp;与) or(||或) =&gt; AND OR-- 需要满足两个条件才能被查询到！-- select * from users where status=0 and id&lt;3-- 在users表中只要满足status=1 或 username='zs'其中一个条件，则会被成功查询到-- select * from users where status=1 or username='zs'-- 四、1.order by status asc （表示升序,不写asc，默认是升序排序）;2.order by id desc(表示降序) 3.多重排序-- 1.对users表中的数据，按照status字段进行------升序排序-- select * from users order by status-- 上面语句与下面语句是 相等 的（写不写asc都行）-- select * from users order by status asc-- 2.按照 id 对结果进行降序的排序 desc ------表示降序排序-- select * from users order by id desc-- 3.多重排序-- 对users表中的数据，先按照status进行降序排序，再按照username字母的顺序,进行升序排序---asc可省略-- 因为字母x在字母z的前面，所以username asc之后名为xh在zs之前-- select * from users order by status desc,username asc-- 五、count(*) 函数用于查询结果的总数据条数; as 可以把查询出来的列名称（即count(*) ）改为其他名字-- 使用count(*) 来统计users表中，状态为0的用户总数量-- select count(*) from users where status=0-- 使用 as 关键字给列(字段)改名字-- select count(*) as total from users where status=0-- select username as name,password as upwd from users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查询数据（select） 、插入数据（insert into） 、更新数据（update） 、删除数据（delete） ;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;where 条件、and 和 or 运算符、order by 排</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="https://largefan.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>github上手</title>
    <link href="https://largefan.github.io/posts/10.html"/>
    <id>https://largefan.github.io/posts/10.html</id>
    <published>2022-06-18T07:00:00.000Z</published>
    <updated>2022-08-30T11:26:17.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、上手github"><a href="#一、上手github" class="headerlink" title="一、上手github"></a>一、上手github</h3><p><strong>1. <font color="red">git clone 远程库链接</font> ，把文件克隆下来。</strong></p><p><strong>2.创建分支，把代码文件复制进克隆文件夹，然后<font color="red">add和commit</font>，然后合并分支，然后可以把旧分支删除。</strong></p><p><strong>3.<font color="red">git push 别名（远程地址） 分支</font>，然后会弹出验证授权，确认后则上传github成功。</strong></p><p><strong>4.如代码更新了，则用 <font color="red">git pull 远程库地址别名 远程分支名</font>，即可更新工作区代码。</strong></p><h2 id="二、遇到都问题总结："><a href="#二、遇到都问题总结：" class="headerlink" title="二、遇到都问题总结："></a>二、遇到都问题总结：</h2><p><strong>1.解决 git clone 无法获取本地颁发者证书 问题</strong>：</p><p>解决方法：输入命令即可：git config –global http.sslVerify false</p><hr><p><strong>2. 不要把代码文件里的 .git 复制进 git clone 克隆文件夹里面！只需创建分支，把代码文件提交进本地库，然后提交远程库。</strong></p><hr><p><strong>3.git pull（当远程仓库有更新，可用pull进行更新，但它会直接更新到工作区把旧的文件覆盖掉！所以我们用fetch更新到本地仓库 再用 diff对比区别 ，没问题在合并过来。）</strong></p><hr><p><strong>4. git remote -v</strong></p><blockquote><p>这个命令可以简化操作：</p><blockquote><p>例：push的时候 <strong>远程库链接</strong> 可以换成 <strong>origin</strong> 来代替URL</p></blockquote></blockquote><hr><p><strong>5.新手在github上一般点击 Download ZIP 下载文件,此方法只会下载当前最新版本的文件，其中的版本历史和记录不会下载，也就是说压缩文件里面没有.git文件夹！</strong></p><hr><p><strong>6.分支不明确导致的问题：</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/c0ee7b83fdce344ea168916978166d15.png" alt="分支不明确导致的问题"></p><hr><p><strong>7.再次说明！！！！！</strong></p><p><strong>如果你想要把代码添加到github，就必须上github把仓库下载下来，在把写好代码拉进来即可。</strong></p><p><strong>一、在github上创建仓库，然后在桌面创建文件夹右键打开Bash，然后git clone 仓库地址 把文件下载下来。</strong></p><p><strong>二、把写好的文件代码 复制拉进来 然后执行常用命令①②③④ 就可以把代码添加到github上了</strong></p><p><strong>三、如果你在github上修改了代码 则执行⑤命令 把github上的代码 更新 到本地了</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、上手github&quot;&gt;&lt;a href=&quot;#一、上手github&quot; class=&quot;headerlink&quot; title=&quot;一、上手github&quot;&gt;&lt;/a&gt;一、上手github&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. &lt;font color=&quot;red&quot;&gt;git clone</summary>
      
    
    
    
    <category term="Git" scheme="https://largefan.github.io/categories/Git/"/>
    
    
    <category term="Github" scheme="https://largefan.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Git实操</title>
    <link href="https://largefan.github.io/posts/9.html"/>
    <id>https://largefan.github.io/posts/9.html</id>
    <published>2022-06-18T06:30:15.000Z</published>
    <updated>2022-09-12T17:41:17.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="①git-init："><a href="#①git-init：" class="headerlink" title="①git init："></a>①git init：</h2><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git1.png" alt="Git实操1"></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git2.png" alt="Git实操2"></p><h2 id="拓展1：git-status："><a href="#拓展1：git-status：" class="headerlink" title="拓展1：git status："></a>拓展1：git status：</h2><blockquote><p><strong>第一次</strong>查看状态，提示：工作区没有任何文件</p></blockquote><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git3.png" alt="Git实操3"></p><h2 id="拓展2：（用vim）：新增txt文件："><a href="#拓展2：（用vim）：新增txt文件：" class="headerlink" title="拓展2：（用vim）：新增txt文件："></a>拓展2：（用vim）：新增txt文件：</h2><p><strong>1.输入：Vim lzb.txt</strong></p><p><strong>2.输入内容：aaa bbb ccc</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git4.png" alt="Git实操4"></p><p><strong>3.按esc键</strong></p><p><strong>4.按SHIFT + : 然后wq保存</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git5.png" alt="Git实操5"></p><p><strong>5.回车即成功创建lzb.txt</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git6.png" alt="Git实操6"></p><h2 id="拓展3："><a href="#拓展3：" class="headerlink" title="拓展3："></a><strong>拓展3：</strong></h2><blockquote><p><strong>第二次</strong>查看状态，提示： 检测到未追踪的文件（即还未git add）</p></blockquote><p><strong>git status</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git7.png" alt="Git实操7"></p><h2 id="②添加暂存区：git-add-lzb-txt"><a href="#②添加暂存区：git-add-lzb-txt" class="headerlink" title="②添加暂存区：git add lzb.txt"></a>②添加暂存区：git add lzb.txt</h2><p><strong>git add lzb.txt</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git8.png" alt="Git实操8"></p><blockquote><p><strong>第三次</strong>查看状态，提示：检测到暂存区有新文件<strong>（</strong>即还未<strong>③git commit -m “日志信息” 文件名</strong>）</p></blockquote><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git9.png" alt="Git实操9"></p><h2 id="③提交本地库：-文件名不写则全部提交"><a href="#③提交本地库：-文件名不写则全部提交" class="headerlink" title="③提交本地库：(文件名不写则全部提交)"></a>③提交本地库：(文件名不写则全部提交)</h2><p><strong>git commit -m “日志信息” 文件名</strong></p><blockquote><p>此时<strong>第四次</strong>查看状态，提示：没有文件需要提交了</p></blockquote><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git10.png" alt="Git实操10"></p><h2 id="拓展4（用vim）：修改文件-lzb-txt"><a href="#拓展4（用vim）：修改文件-lzb-txt" class="headerlink" title="拓展4（用vim）：修改文件 lzb.txt"></a>拓展4（用vim）：修改文件 lzb.txt</h2><p><strong>1.输入：$ vim lzb.txt</strong></p><p><strong>2.按 i 键才能修改。</strong></p><p><strong>3.输入以下内容：</strong></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git11.png" alt="Git实操11"></p><p><strong>4.按esc</strong></p><p><strong>5.按SHIFT + ：</strong></p><p><strong>6.wq</strong></p><p><strong>7.回车即修改成功。</strong></p><h2 id="拓展5："><a href="#拓展5：" class="headerlink" title="拓展5："></a>拓展5：</h2><blockquote><p>查看状态,提示：检测到工作区有文件被修改！</p></blockquote><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git12.png" alt="Git实操12"></p><blockquote><p>然后需要我们 重新 添加暂存区 和 提交本地库 !</p><blockquote><p>小技巧：把 add 和 commit 合在一起写，这样就可以从 工作区 跳到 本地版本库 了!</p><blockquote><p>从下图，查看状态可看出已经没有文件需要提交了！</p></blockquote></blockquote></blockquote><p><img src="https://s1.imagehub.cc/images/2022/08/30/Git13.png" alt="Git实操13"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;①git-init：&quot;&gt;&lt;a href=&quot;#①git-init：&quot; class=&quot;headerlink&quot; title=&quot;①git init：&quot;&gt;&lt;/a&gt;①git init：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s1.imagehub.cc/image</summary>
      
    
    
    
    <category term="Git" scheme="https://largefan.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://largefan.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git的常用命令</title>
    <link href="https://largefan.github.io/posts/8.html"/>
    <id>https://largefan.github.io/posts/8.html</id>
    <published>2022-06-18T06:12:31.000Z</published>
    <updated>2022-09-12T17:41:49.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Git的常用命令"><a href="#一、Git的常用命令" class="headerlink" title="一、Git的常用命令"></a>一、Git的常用命令</h2><table><thead><tr><th align="center"><strong>命令名称</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><strong>git config –global user.name 用户名</strong></td><td align="center"><strong>设置用户签名</strong></td></tr><tr><td align="center"><strong>git config –global user.email 邮箱</strong></td><td align="center"><strong>设置用户签名</strong></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>①git init</strong></td><td align="center"><strong>初始化本地库</strong></td></tr><tr><td align="center"><strong>git status</strong></td><td align="center"><strong>查看本地库状态</strong></td></tr><tr><td align="center"><strong>②git add 文件名  git add . 意思是把所有文件添加到暂存区</strong></td><td align="center"><strong>添加到暂存区</strong></td></tr><tr><td align="center"><strong>③git commit -m “日志信息” 文件名</strong></td><td align="center"><strong>提交到本地库</strong></td></tr><tr><td align="center"><strong>④git push 别名（远程地址） 分支</strong></td><td align="center"><strong>本地库提交到 github</strong></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>⑤当  GitHub 平台修改了代码 则可用    git pull  更新到本地库</strong></td><td align="center"><strong>即会覆盖本地库代码！</strong></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>版本控制</strong></td><td align="center"><strong>作用</strong></td></tr><tr><td align="center"><strong>git reflog</strong></td><td align="center"><strong>查看版本信息</strong></td></tr><tr><td align="center"><strong>git log</strong></td><td align="center"><strong>查看版本详细信息</strong></td></tr><tr><td align="center"><strong>git reset –hard 版本号</strong></td><td align="center"><strong>版本切换</strong></td></tr><tr><td align="center"><strong>cat lzb.txt(文件名)</strong></td><td align="center"><strong>查看版本内容</strong></td></tr></tbody></table><blockquote><p>注意：</p><blockquote><ol><li>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。</li></ol><ol start="2"><li>这里设置用户签名和将来登录<strong>GitHub</strong>（或其他代码托管中心）的账号没有<strong>任何关系！</strong></li></ol></blockquote></blockquote><h2 id="二、分支命令"><a href="#二、分支命令" class="headerlink" title="二、分支命令"></a>二、分支命令</h2><table><thead><tr><th align="center">命令名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>git branch 分支名</strong></td><td align="center"><strong>创建分支</strong></td></tr><tr><td align="center"><strong>git branch -v</strong></td><td align="center"><strong>查看分支</strong></td></tr><tr><td align="center"><strong>git checkout 分支名</strong></td><td align="center"><strong>切换分支</strong></td></tr><tr><td align="center"><strong>git merge 分支名</strong></td><td align="center"><strong>把指定的分支合并到当前分支上</strong></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"><strong>git branch -d</strong> <strong>分支名</strong></td><td align="center"><strong>删除分支（非常确定要删除，则该分支用大写 -D）</strong></td></tr><tr><td align="center"><strong>git checkout -b</strong> <strong>要创建的分支名</strong></td><td align="center"><strong>创建分支并马上切换到新分支</strong></td></tr></tbody></table><h2 id="三、-gitignore—文件解说"><a href="#三、-gitignore—文件解说" class="headerlink" title="三、.gitignore—文件解说"></a>三、.gitignore—文件解说</h2><table><thead><tr><th align="center"><strong>命令</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><strong>touch .gitignore</strong></td><td align="center"><strong>处理在实际开发中不需要提交的文件</strong></td></tr></tbody></table><blockquote><ol><li><p>在.gitignore里面写入图片名字，即可让git不在追踪此图片。</p><blockquote><ol start="2"><li>查看是否成功命令：git status(未提示图片名字则成功，反之失败)</li></ol></blockquote></li></ol></blockquote><h2 id="四、GitHub命令操作"><a href="#四、GitHub命令操作" class="headerlink" title="四、GitHub命令操作"></a>四、GitHub命令操作</h2><table><thead><tr><th align="center"><strong>命令</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><strong>git clone 链接(远程地址 )</strong></td><td align="center"><strong>将远程仓库的内容克隆到本地</strong></td></tr><tr><td align="center"><strong>git remote -v</strong></td><td align="center"><strong>查看本地仓库和远程仓库有哪些联系</strong></td></tr><tr><td align="center"><strong>git remote add 别名 远程地址</strong></td><td align="center"><strong>起别名</strong></td></tr><tr><td align="center"><strong>git push 别名 分支</strong></td><td align="center"><strong>推送本地分支上的内容到远程仓库</strong></td></tr><tr><td align="center"><strong>git  fetch</strong></td><td align="center"><strong>与diff配合更新本地，不会改变工作区，因为它是添加到本地仓库。</strong></td></tr><tr><td align="center"><strong>git diff 远程仓库名/分支名</strong></td><td align="center"><strong>此符号 /   照写。用于查看 远程仓库和分支的区别。</strong></td></tr><tr><td align="center"><strong>git pull 远程库地址别名  远程分支名</strong></td><td align="center"><strong>如果远程仓库和分支没问题，则用pull添加到工作区，如不使用fetch和diff命令，直接pull则会直接覆盖掉工作区。</strong></td></tr></tbody></table><h2 id="五、vim–命令"><a href="#五、vim–命令" class="headerlink" title="五、vim–命令"></a>五、vim–命令</h2><pre class="line-numbers language-none"><code class="language-none">1.新增（或修改）txt文件：$ Vim lzb.txt2.esc退出编辑状态；yy复制p粘贴3.按SHIFT + : 然后wq保存4.按 i 键才能修改5.查看文件：cat 文件名（即lzb.txt）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Git的常用命令&quot;&gt;&lt;a href=&quot;#一、Git的常用命令&quot; class=&quot;headerlink&quot; title=&quot;一、Git的常用命令&quot;&gt;&lt;/a&gt;一、Git的常用命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Git" scheme="https://largefan.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://largefan.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git分支与版本控制</title>
    <link href="https://largefan.github.io/posts/7.html"/>
    <id>https://largefan.github.io/posts/7.html</id>
    <published>2022-06-18T04:30:13.000Z</published>
    <updated>2022-09-12T17:41:40.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、分支是什么？"><a href="#一、分支是什么？" class="headerlink" title="一、分支是什么？"></a>一、分支是什么？</h2><ul><li>分支可以简单理解为副本，一个分支就是一个单独的副本。（即在副本上操作，不动原文件）优点：<ol><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ol></li></ul><h2 id="二、分支-命令操作"><a href="#二、分支-命令操作" class="headerlink" title="二、分支-命令操作"></a>二、分支-命令操作</h2><ol><li><p>创建分支：<strong>git branch 分支名</strong></p></li><li><p>查看分支：<strong>git branch -v</strong></p></li><li><p>切换分支：<strong>git checkout 分支名**</strong></p><p>*表示当前所在的分区</p></li></ol><ol start="4"><li><p>修改分支里的文件，需要重新添加暂存区和提交本地库。</p><p><img src="https://s1.imagehub.cc/images/2022/08/30/git1.png" alt="Git分支1"></p><p><img src="https://s1.imagehub.cc/images/2022/08/30/git2.png" alt="Git分支2"></p></li></ol><h2 id="三、注意：不要把历史版本和分支搞混淆了"><a href="#三、注意：不要把历史版本和分支搞混淆了" class="headerlink" title="三、注意：不要把历史版本和分支搞混淆了"></a>三、注意：不要把历史版本和分支搞混淆了</h2><h2 id="四、版本控制"><a href="#四、版本控制" class="headerlink" title="四、版本控制"></a>四、版本控制</h2><ul><li>命令如下：<ol><li><strong>git reflog：查看版本信息</strong><ol start="2"><li><strong>git log：查看版本详细信息</strong></li></ol></li></ol></li></ul><p><img src="https://s1.imagehub.cc/images/2022/08/30/git112457d6ce771fce1.png" alt="git版本控制命令1"></p><ol start="3"><li><p><strong>切换版本：</strong>    <strong>git reset –hard 版本号</strong></p></li><li><p><strong>查看版本内容：</strong>    **cat lzb.txt(文件名) **</p></li></ol><p><img src="https://s1.imagehub.cc/images/2022/08/30/git276f0a911fb27de0a.png" alt="git版本控制命令2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、分支是什么？&quot;&gt;&lt;a href=&quot;#一、分支是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、分支是什么？&quot;&gt;&lt;/a&gt;一、分支是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分支可以简单理解为副本，一个分支就是一个单独的副本。（即在副本上操作，不动原文件</summary>
      
    
    
    
    <category term="Git" scheme="https://largefan.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://largefan.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git概述</title>
    <link href="https://largefan.github.io/posts/6.html"/>
    <id>https://largefan.github.io/posts/6.html</id>
    <published>2022-06-18T04:23:11.000Z</published>
    <updated>2022-09-12T17:41:32.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Git是什么？"><a href="#一、Git是什么？" class="headerlink" title="一、Git是什么？"></a>一、Git是什么？</h2><ol><li><p>Git 是一个免费的、开源的<strong>分布式</strong>版本控制系统，可以快速高效地处理从小型到大型的各种项目。</p></li><li><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具。</p></li></ol><h2 id="二、什么是版本控制？"><a href="#二、什么是版本控制？" class="headerlink" title="二、什么是版本控制？"></a>二、什么是版本控制？</h2><ol><li>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</li><li></li></ol><h2 id="三、版本控制分类："><a href="#三、版本控制分类：" class="headerlink" title="三、版本控制分类："></a>三、版本控制分类：</h2><ul><li><p><strong>集中式版本控制工具</strong>：CVS、SVN(Subversion)、VSS……</p><ol><li>优点：可以看到项目中的其他人在做些什么，管理员也可掌控每个开发者的权限，比在各个客户端上维护本地数据库来得轻松容易。</li><li>缺点：服务器坏了一天，那么这一天谁都无法提交更新。</li></ol></li><li><p><strong>分布式版本控制工具：Git</strong>、Mercurial、Bazaar、Darcs……</p><ol><li>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷</li><li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Git是什么？&quot;&gt;&lt;a href=&quot;#一、Git是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、Git是什么？&quot;&gt;&lt;/a&gt;一、Git是什么？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Git 是一个免费的、开源的&lt;strong&gt;分布式&lt;/strong</summary>
      
    
    
    
    <category term="Git" scheme="https://largefan.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://largefan.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Node命令与快捷键总结</title>
    <link href="https://largefan.github.io/posts/14.html"/>
    <id>https://largefan.github.io/posts/14.html</id>
    <published>2022-06-11T00:10:10.000Z</published>
    <updated>2022-09-12T16:51:19.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、终端中的快捷键："><a href="#一、终端中的快捷键：" class="headerlink" title="一、终端中的快捷键："></a><strong>一、终端中的快捷键：</strong></h3><h4 id="①-使用-↑键，可以快速定位到上一次执行的命令"><a href="#①-使用-↑键，可以快速定位到上一次执行的命令" class="headerlink" title="① 使用 ↑键，可以快速定位到上一次执行的命令"></a>① 使用 ↑键，可以快速定位到上一次执行的命令</h4><h4 id="②-使用-tab键，能够快速补全路径"><a href="#②-使用-tab键，能够快速补全路径" class="headerlink" title="② 使用 tab键，能够快速补全路径"></a>② 使用 tab键，能够快速补全路径</h4><h4 id="③-使用-esc键，能够快速清空当前已输入的命令"><a href="#③-使用-esc键，能够快速清空当前已输入的命令" class="headerlink" title="③ 使用 esc键，能够快速清空当前已输入的命令"></a>③ 使用 esc键，能够快速清空当前已输入的命令</h4><h4 id="④-输入-cls命令，可以清空终端"><a href="#④-输入-cls命令，可以清空终端" class="headerlink" title="④ 输入 cls命令，可以清空终端"></a>④ 输入 cls命令，可以清空终端</h4><h3 id="二、npm与包："><a href="#二、npm与包：" class="headerlink" title="二、npm与包："></a>二、npm与包：</h3><h4 id="1-查看npm包管理工具的版本号："><a href="#1-查看npm包管理工具的版本号：" class="headerlink" title="1. 查看npm包管理工具的版本号："></a>1. 查看npm包管理工具的版本号：</h4><p><font color="red">npm -v</font></p><h4 id="2-项目中安装包的命令："><a href="#2-项目中安装包的命令：" class="headerlink" title="2. 项目中安装包的命令："></a>2. 项目中安装包的命令：</h4><p><font color="red">npm install 包的完整名称  （简写：npm i 包的名称）</font></p><h4 id="3-项目中安装指定版本命令："><a href="#3-项目中安装指定版本命令：" class="headerlink" title="3. 项目中安装指定版本命令："></a>3. 项目中安装指定版本命令：</h4><p><font color="red">npm i <a href="mailto:moment@2.22.2">moment@2.22.2</a></font></p><h4 id="4-创建package-json"><a href="#4-创建package-json" class="headerlink" title="4. 创建package.json:"></a>4. 创建package.json:</h4><p><font color="red"> npm init -y</font></p><h4 id="5-一次性安装package-json里面记录的包："><a href="#5-一次性安装package-json里面记录的包：" class="headerlink" title="5. 一次性安装package.json里面记录的包："></a>5. 一次性安装package.json里面记录的包：</h4><p><font color="red"> npm i</font></p><h4 id="6-卸载包："><a href="#6-卸载包：" class="headerlink" title="6. 卸载包："></a>6. 卸载包：</h4><p><font color="red">npm uninstall</font></p><h4 id="7-安装到dependencies节点："><a href="#7-安装到dependencies节点：" class="headerlink" title="7. 安装到dependencies节点："></a>7. 安装到dependencies节点：</h4><p><font color="red">npm install 包的完整名称</font></p><h4 id="8-安装到devDependencies节点："><a href="#8-安装到devDependencies节点：" class="headerlink" title="8. 安装到devDependencies节点："></a>8. 安装到devDependencies节点：</h4><p><font color="red">npm install 包的完整名称 –save-dev(简写：npm i 包的完整名称 -D)</font></p><h4 id="9-nrm工具（方便切换下包的镜像源）："><a href="#9-nrm工具（方便切换下包的镜像源）：" class="headerlink" title="9. nrm工具（方便切换下包的镜像源）："></a>9. nrm工具（方便切换下包的镜像源）：</h4><ul><li>下载nrm：npm i nrm -g</li><li>查看所有镜像源：nrm ls</li><li>切换淘宝镜像：nrm use taobao</li></ul><h4 id="10-全局包："><a href="#10-全局包：" class="headerlink" title="10. 全局包："></a>10. 全局包：</h4><ul><li><p>安装：npm i 包名 -g</p></li><li><p>卸载：npm uninstall 包名 -g</p></li></ul><h4 id="11-i5ting-toc-用来转换-md文件-："><a href="#11-i5ting-toc-用来转换-md文件-：" class="headerlink" title="11. i5ting_toc(用来转换.md文件)："></a>11. i5ting_toc(用来转换.md文件)：</h4><ul><li><p>首先全局安装这个工具：npm install -g i5ting_toc</p></li><li><p>调用i5ting_toc，实现 md 转换 html 功能：i5ting_toc -f md文件路径 -o</p></li></ul><h4 id="12-在终端登录账号：（注意：镜像源必须是npm）"><a href="#12-在终端登录账号：（注意：镜像源必须是npm）" class="headerlink" title="12. 在终端登录账号：（注意：镜像源必须是npm）"></a>12. 在终端登录账号：（注意：镜像源必须是npm）</h4><ul><li><p>1.npm login</p></li><li><p>2.输入用户名、密码、邮箱后，即可登录成功</p></li></ul><h4 id="13-在终端发布包："><a href="#13-在终端发布包：" class="headerlink" title="13. 在终端发布包："></a>13. 在终端发布包：</h4><ul><li><p>1.将终端切换到要发布的包根目录</p></li><li><p>2.npm publish</p></li><li><p>3.删除已发布的包：npm unpublish 包名 –force</p></li></ul><h3 id="三、路由"><a href="#三、路由" class="headerlink" title="三、路由"></a>三、路由</h3><ul><li><p><strong>Express 的安装：npm i <a href="mailto:express@4.17.1">express@4.17.1</a></strong></p></li><li><p><strong>nodemon的安装（自动重启项目工具）：npm install -g nodemon</strong></p><p><strong>1. 用法：nodemon app.js（ app.js为要启动的文件名字）</strong></p></li></ul><h3 id="四、解决跨域问题："><a href="#四、解决跨域问题：" class="headerlink" title="四、解决跨域问题："></a>四、解决跨域问题：</h3><ul><li><p><strong>安装cors中间件：npm install cors</strong></p></li><li><p><strong>使用方法：const cors = require(‘cors’)  ，然后调用 app.use(cors())</strong> </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、终端中的快捷键：&quot;&gt;&lt;a href=&quot;#一、终端中的快捷键：&quot; class=&quot;headerlink&quot; title=&quot;一、终端中的快捷键：&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、终端中的快捷键：&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;①-使用-↑键，可以快速定位到上</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Node" scheme="https://largefan.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>var-let-const</title>
    <link href="https://largefan.github.io/posts/13.html"/>
    <id>https://largefan.github.io/posts/13.html</id>
    <published>2022-06-09T04:00:10.000Z</published>
    <updated>2022-09-12T16:23:37.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、var-弊端非常多"><a href="#一、var-弊端非常多" class="headerlink" title="一、var(弊端非常多)"></a>一、var(弊端非常多)</h3><ul><li><p>无块级作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">说明：即在大括号中使用<span class="token keyword">var</span>声明变量，我们在大括号外面也访问的到。<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"可被外面访问"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//输出：可被外面访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>存在变量提升</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"存在变量提升"</span><span class="token punctuation">;</span>  <span class="token comment">//输出：undefined</span>等价于下面：<span class="token comment">/*即把 var a; 提升到顶部了，但不知道a是什么，所以返回 undefined。*/</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">"存在变量提升"</span><span class="token punctuation">;</span>              <span class="token comment">//输出：undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、let（用于声明变量，有4个特点。）"><a href="#二、let（用于声明变量，有4个特点。）" class="headerlink" title="二、let（用于声明变量，有4个特点。）"></a>二、let（用于声明变量，有4个特点。）</h3><ul><li><p>有块级作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"大风扇"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"小风扇"</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小风扇</span><span class="token comment">// 大风扇</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同一代码块中，不允许重复声明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"报错了，叼毛"</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"报错了，叼毛"</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Uncaught SyntaxError: Identifier 'a' has already been declared</span>但这个变量可以被重新赋值：<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"叼毛一号"</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token string">"叼毛二号"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出：叼毛二号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不存在变量提升</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"叼毛一号"</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: Cannot access 'a' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>不会成为window的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"2022"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span><span class="token comment">// Uncaught TypeError: window.fn is not a function</span>说明：<span class="token constant">ES6</span>之前，在全局作用域中，使用<span class="token keyword">var</span>声明的变量会成为window对象的属性。例：<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2022</span><span class="token comment">//2022</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、const（用于声明常量，同样有4个特点）"><a href="#三、const（用于声明常量，同样有4个特点）" class="headerlink" title="三、const（用于声明常量，同样有4个特点）"></a>三、const（用于声明常量，同样有4个特点）</h3><ol><li><p><strong>有块级作用域</strong></p></li><li><p><strong>不允许重复声明</strong></p></li><li><p><strong>不存在变量提升</strong></p></li><li><p><strong>不会成为window的属性</strong></p></li></ol><h4 id="3-1-常量不允许重新赋值，“-基本类型-“-声明后是不允许修改该值的："><a href="#3-1-常量不允许重新赋值，“-基本类型-“-声明后是不允许修改该值的：" class="headerlink" title="3.1 常量不允许重新赋值，“ 基本类型 “ 声明后是不允许修改该值的："></a>3.1 <strong>常量不允许重新赋值，“ 基本类型 “ 声明后是不允许修改该值的：</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>      <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-”-引用类型-“-也不能修改该值，但可以修改它属性的值："><a href="#3-2-”-引用类型-“-也不能修改该值，但可以修改它属性的值：" class="headerlink" title="3.2 ” 引用类型 “ 也不能修改该值，但可以修改它属性的值："></a>3.2 <strong>” 引用类型 “ 也不能修改该值，但可以<font color="red">修改它属性的值</font>：</strong></h4><ul><li><p>正确写法：用const是保证person指针不能改变，但person对象 属性的值是可以修改的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token operator">:</span><span class="token string">"Jack"</span><span class="token punctuation">,</span>          age<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"LiHua"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object { name: "LiHua", age: 22 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>错误写法：如改变person指针，让person指向一个新对象，则会报错。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span><span class="token string">"Jack"</span><span class="token punctuation">,</span>            age<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>person <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span><span class="token string">"large fan"</span><span class="token punctuation">,</span>            age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-3-const声明-数组："><a href="#3-3-const声明-数组：" class="headerlink" title="3.3 const声明 数组："></a>3.3 const声明 数组：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"orange"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Array(3) [ "orange", "green", "blue" ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、暂时性死区"><a href="#三、暂时性死区" class="headerlink" title="三、暂时性死区"></a>三、暂时性死区</h3><p><strong>说明：在 ” {} “括起来的块级作用域中，存在一个” 死区 “，它开始于函数开头，终止与变量声明所在的那一行；在这个区域中，我们无法访问let和const声明的变量，这个” 死区 “称为 ” 暂时性死区 “。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Uncaught ReferenceError: Cannot access 'a' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>暂时性死区是随着ES6中的let和const的引入而引入的。</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;&gt;</span>在<span class="token constant">ES5</span>中是没有暂时性死区这种说法的！<span class="token operator">&gt;&gt;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;</span><span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;&gt;&gt;</span>这个例子中不存在暂时性死区，console会沿着作用域链往上寻找。<span class="token operator">&gt;&gt;&gt;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;&gt;</span><span class="token comment">// 2022</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、var-弊端非常多&quot;&gt;&lt;a href=&quot;#一、var-弊端非常多&quot; class=&quot;headerlink&quot; title=&quot;一、var(弊端非常多)&quot;&gt;&lt;/a&gt;一、var(弊端非常多)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;无块级作用域&lt;/p&gt;
&lt;pre class=&quot;</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ES6" scheme="https://largefan.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6简介</title>
    <link href="https://largefan.github.io/posts/12.html"/>
    <id>https://largefan.github.io/posts/12.html</id>
    <published>2022-06-08T16:10:00.000Z</published>
    <updated>2022-09-12T16:23:16.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ES6简介"><a href="#一、ES6简介" class="headerlink" title="一、ES6简介"></a>一、ES6简介</h3><ul><li><p>JavaScript由ECMAScript、DOM、BOM这三大部分组成。</p></li><li><p>由于ES6发布于2015年，所以叫   “ ES2015 ” 或 “ ECMAScript2015 ”。这两种叫法都是指ES6。</p></li></ul><h3 id="问题-1：为什么ES12都出来了还叫ES6？"><a href="#问题-1：为什么ES12都出来了还叫ES6？" class="headerlink" title="问题 1：为什么ES12都出来了还叫ES6？"></a>问题 1：为什么ES12都出来了还叫ES6？</h3><ul><li>因为ES5到ES6是一次大的版本更新。ES7-ES12是小更新，所以笼统称为ES6。</li></ul><h3 id="问题-2-：解决低版本浏览器不支持ES6语法"><a href="#问题-2-：解决低版本浏览器不支持ES6语法" class="headerlink" title="问题 2 ：解决低版本浏览器不支持ES6语法"></a>问题 2 ：解决低版本浏览器不支持ES6语法</h3><ul><li>实际开发不需要我们手动配置Babel环境了，因为VUE或React等脚手架工具会帮我们配置好！</li></ul><h3 id="问题-3-：现在主流浏览器-Chrome、Edge、Firefox等浏览器都已经支持绝大部分的ES6语法了。"><a href="#问题-3-：现在主流浏览器-Chrome、Edge、Firefox等浏览器都已经支持绝大部分的ES6语法了。" class="headerlink" title="问题 3 ：现在主流浏览器 Chrome、Edge、Firefox等浏览器都已经支持绝大部分的ES6语法了。"></a>问题 3 ：现在主流浏览器 Chrome、Edge、Firefox等浏览器都已经支持绝大部分的ES6语法了。</h3><ul><li>也就是说不需要Babel编译，就可以直接在浏览器中运行ES6代码。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、ES6简介&quot;&gt;&lt;a href=&quot;#一、ES6简介&quot; class=&quot;headerlink&quot; title=&quot;一、ES6简介&quot;&gt;&lt;/a&gt;一、ES6简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript由ECMAScript、DOM、BOM这三大部分组成。&lt;/p&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ES6" scheme="https://largefan.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="https://largefan.github.io/posts/100.html"/>
    <id>https://largefan.github.io/posts/100.html</id>
    <published>2021-10-09T16:00:00.000Z</published>
    <updated>2022-08-28T07:01:40.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1、HTML5的新特性？"><a href="#1、HTML5的新特性？" class="headerlink" title="1、HTML5的新特性？"></a>1、HTML5的新特性？</h3><ul><li>1、语义化标签，比如header、footer、nav、aside、article、section</li><li>2、音视频，比如audio、video</li><li>3、画布canvas、矢量图svg</li><li>3、画布，canvas的api有getContext、fillStyle、fillRect等</li><li>4、本地存储localStorage、sessionStorage</li><li>5、web worker<h3 id="2、语义化的好处？"><a href="#2、语义化的好处？" class="headerlink" title="2、语义化的好处？"></a>2、语义化的好处？</h3></li><li>1、代码分块清晰，便于维护</li><li>2、页面结构清晰，便于浏览器。搜索引擎解析</li><li>3、利于搜索引擎的爬取，利于SEO<h3 id="3、canvas的常用api有哪些？"><a href="#3、canvas的常用api有哪些？" class="headerlink" title="3、canvas的常用api有哪些？"></a>3、canvas的常用api有哪些？</h3></li><li>getContext：返回一个指定canvas的绘画环境对象</li><li>beginPath：开始绘制</li><li>moveTo：移动画笔位置</li><li>lineTo：用来画线段</li><li>stroke：用来实施绘制的操作</li><li>lineStyle：设置线段的样式</li><li>closePath：结束绘制<h3 id="4、web-worker有什么作用？应用场景有哪些？"><a href="#4、web-worker有什么作用？应用场景有哪些？" class="headerlink" title="4、web worker有什么作用？应用场景有哪些？"></a>4、web worker有什么作用？应用场景有哪些？</h3>开启一个子线程，且子线程的操作不受线程的影响</li><li>大数据处理</li><li>耗费时间较长的操作<h3 id="5、浏览器本地缓存localStorage与sessionStorage的区别？"><a href="#5、浏览器本地缓存localStorage与sessionStorage的区别？" class="headerlink" title="5、浏览器本地缓存localStorage与sessionStorage的区别？"></a>5、浏览器本地缓存localStorage与sessionStorage的区别？</h3></li><li>生命周期不同：前者一直存在浏览器，除非用户手动清除，后者生命周期结束于浏览器或者tab页的关闭</li></ul><h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="1、有哪些新特性呢？"><a href="#1、有哪些新特性呢？" class="headerlink" title="1、有哪些新特性呢？"></a>1、有哪些新特性呢？</h3><p>flex、animation、transform、border-radius、box-shadow、opacity</p><h3 id="2、背景毛玻璃的效果如何实现呢？"><a href="#2、背景毛玻璃的效果如何实现呢？" class="headerlink" title="2、背景毛玻璃的效果如何实现呢？"></a>2、背景毛玻璃的效果如何实现呢？</h3><p>filter：blur()</p><h3 id="3、position有哪几种呢？"><a href="#3、position有哪几种呢？" class="headerlink" title="3、position有哪几种呢？"></a>3、position有哪几种呢？</h3><ul><li>static：默认</li><li>relative：相对于自身</li><li>absolute：相对于最近的一个非static的祖先级元素进行定位</li><li>fixed：相对于屏幕窗口进行定位</li><li>sticky：用来实现吸顶效果<h3 id="4、如何自己实现跟position：sticky的效果？"><a href="#4、如何自己实现跟position：sticky的效果？" class="headerlink" title="4、如何自己实现跟position：sticky的效果？"></a>4、如何自己实现跟position：sticky的效果？</h3>使用getBoundingClientRect或者IntersectionObserver计算指定元素位置，到达一定距离更改指定元素定位为fixed，从而实现sticky的效果<h3 id="5、重绘回流是什么呢？"><a href="#5、重绘回流是什么呢？" class="headerlink" title="5、重绘回流是什么呢？"></a>5、重绘回流是什么呢？</h3><a href="https://juejin.cn/post/6986416221323264030">文章链接</a><h3 id="6、怎么降低重绘回流的次数呢？"><a href="#6、怎么降低重绘回流的次数呢？" class="headerlink" title="6、怎么降低重绘回流的次数呢？"></a>6、怎么降低重绘回流的次数呢？</h3><a href="https://juejin.cn/post/6986416221323264030">文章链接</a><h3 id="7、flex布局如何更改主轴方向？"><a href="#7、flex布局如何更改主轴方向？" class="headerlink" title="7、flex布局如何更改主轴方向？"></a>7、flex布局如何更改主轴方向？</h3>设置flex-direction样式属性<h3 id="8、flex布局如何允许换行呢？"><a href="#8、flex布局如何允许换行呢？" class="headerlink" title="8、flex布局如何允许换行呢？"></a>8、flex布局如何允许换行呢？</h3>设置flex-wrap样式属性<h3 id="9、flex布局实现水平垂直据居中？"><a href="#9、flex布局实现水平垂直据居中？" class="headerlink" title="9、flex布局实现水平垂直据居中？"></a>9、flex布局实现水平垂直据居中？</h3>设置justify-content和align-items都为center<h3 id="10、flex：1的原理是什么呢？"><a href="#10、flex：1的原理是什么呢？" class="headerlink" title="10、flex：1的原理是什么呢？"></a>10、flex：1的原理是什么呢？</h3>flex-grow 、flex-shrink 、flex-basis这三个样式的合集，全写状态为flex:0 1 auto，简写为flex: 1<h3 id="11、rem与em的区别是什么呢？"><a href="#11、rem与em的区别是什么呢？" class="headerlink" title="11、rem与em的区别是什么呢？"></a>11、rem与em的区别是什么呢？</h3></li><li>rem：相对于标签的font-size去决定大小，例如html标签font-size为14px，则2rem === 28px</li><li>em：相对于自身的font-size去决定大小，自身没有font-size则继承祖先级元素的font-size</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1、原型链是什么呢？有什么作用吗"><a href="#1、原型链是什么呢？有什么作用吗" class="headerlink" title="1、原型链是什么呢？有什么作用吗"></a>1、原型链是什么呢？有什么作用吗</h3><ul><li>原型链：原型链是一条对象隐式原型不断往上指向的一条指向链，尽头是Object的隐式原型，也就是null</li><li>作用：构造函数原型上的东西可以让实例们共享，从而节省了空间<h3 id="2、闭包是什么？有什么优缺点"><a href="#2、闭包是什么？有什么优缺点" class="headerlink" title="2、闭包是什么？有什么优缺点"></a>2、闭包是什么？有什么优缺点</h3>闭包是一个能让函数外部访问到函数内部的一个函数</li><li>优点是：延长函数内部变量的寿命，使函数外部能访问到函数内部</li><li>缺点是：滥用闭包导致内存溢出，页面卡顿<h3 id="3、JavaScript总共有几种数据类型？"><a href="#3、JavaScript总共有几种数据类型？" class="headerlink" title="3、JavaScript总共有几种数据类型？"></a>3、JavaScript总共有几种数据类型？</h3>字符串、布尔值、数值、undefined、null、object、symbol、bigInt<h3 id="4、JavaScript判断类型的方式是什么？"><a href="#4、JavaScript判断类型的方式是什么？" class="headerlink" title="4、JavaScript判断类型的方式是什么？"></a>4、JavaScript判断类型的方式是什么？</h3></li><li>typeof：只能判断 字符串、布尔值、数值、undefined、function、object、symbol、bigInt，不能区分判断 数组、null、对象</li><li>A instanceof B：判断A是否为B的实例对象，从而判断A是否为B类型</li><li>Object.prototype.toString.call()：可以判断所有的数据类型<h3 id="6、JavaScript不同类型的存储方式有何区别？"><a href="#6、JavaScript不同类型的存储方式有何区别？" class="headerlink" title="6、JavaScript不同类型的存储方式有何区别？"></a>6、JavaScript不同类型的存储方式有何区别？</h3>普遍认为</li><li>基础数据类型存于栈内存</li><li>引用数据类型存于堆内存<br>我认为</li><li>所有数据都存于堆内存，栈内存只存指针<h3 id="7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？"><a href="#7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？" class="headerlink" title="7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？"></a>7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？</h3>所以说我觉得所有数据都存于堆内存，毕竟栈内存容量有限。<h3 id="8、call、apply、bind的区别？"><a href="#8、call、apply、bind的区别？" class="headerlink" title="8、call、apply、bind的区别？"></a>8、call、apply、bind的区别？</h3></li><li>call于apply的区别在于传参，前者直接传参，后者传一个数组</li><li>bind传参后不立即执行，而是会返回一个函数，这个函数可以继续传参，且执行（bind函数可以分两次传参）<h3 id="9、bind返回的函数能作为构造函数吗？"><a href="#9、bind返回的函数能作为构造函数吗？" class="headerlink" title="9、bind返回的函数能作为构造函数吗？"></a>9、bind返回的函数能作为构造函数吗？</h3>不能哦，会报错的<h3 id="10、赋值、深拷贝与浅拷贝有什么不同？"><a href="#10、赋值、深拷贝与浅拷贝有什么不同？" class="headerlink" title="10、赋值、深拷贝与浅拷贝有什么不同？"></a>10、赋值、深拷贝与浅拷贝有什么不同？</h3></li><li>赋值：赋值指针指向，还是用的同一个内存空间</li><li>浅拷贝：只拷贝第一层</li><li>深拷贝：所有层都会进行拷贝<h3 id="11、怎么判断一个对象有环引用呢？"><a href="#11、怎么判断一个对象有环引用呢？" class="headerlink" title="11、怎么判断一个对象有环引用呢？"></a>11、怎么判断一个对象有环引用呢？</h3>定义一个空数组，且对于目标对象进行递归，每次都判断递归项是否为对象，是的话放进数组，且每次判断属性值是否在数组里，在的话说明环引用了<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cycleDetector</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">function</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> temp <span class="token operator">=</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> temp <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>                <span class="token function">cycle</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">cycle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> flag<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="1、let、const的暂时性死区问题？"><a href="#1、let、const的暂时性死区问题？" class="headerlink" title="1、let、const的暂时性死区问题？"></a>1、let、const的暂时性死区问题？</h3><p>在一个作用域里如果存在let、const定义的一个变量之前使用该变量，则报错“cannot access xx before initialization”</p><h3 id="2、Promise的then为什么可以链式调用？"><a href="#2、Promise的then为什么可以链式调用？" class="headerlink" title="2、Promise的then为什么可以链式调用？"></a>2、Promise的then为什么可以链式调用？</h3><p>Promise的then方法返回一个新的Promise对象，保证了then方法可以进行链式调用</p><h3 id="3、async-await的用法？"><a href="#3、async-await的用法？" class="headerlink" title="3、async/await的用法？"></a>3、async/await的用法？</h3><ul><li>async/await的作用是：以同步的方式执行异步操作，实现排队效果</li><li>async：async函数执行返回一个Promise</li><li>await：await后接Promise则会等待Promise返回结果，接普通函数执行则会接收返回结果</li><li>await只能在async中使用，但是浏览器调试中await可单独使用<h3 id="4、Class的静态属性、继承？"><a href="#4、Class的静态属性、继承？" class="headerlink" title="4、Class的静态属性、继承？"></a>4、Class的静态属性、继承？</h3></li><li>静态属性：static关键字定义的变量属性，只能通过Class构造函数的属性的方式去访问</li><li>继承：使用 Child extends Father {}，且配合super对象，完成继承<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2></li></ul><h3 id="1、Vue与React的区别在哪？"><a href="#1、Vue与React的区别在哪？" class="headerlink" title="1、Vue与React的区别在哪？"></a>1、Vue与React的区别在哪？</h3><p>比较的是Vue2<br>相同点：</p><ul><li>1.都使用了虚拟dom</li><li>2.组件化开发</li><li>3.都是单向数据流(父子组件之间，不建议子修改父传下来的数据)</li><li>4.都支持服务端渲染<br>不同点：</li><li>1.React的JSX，Vue的template</li><li>2.数据变化，React手动(setState)，Vue自动(初始化已响应式处理，Object.defineProperty，Proxy)</li><li>3.React单向绑定，Vue双向绑定</li><li>4.React的Redux、mobx，Vue的Vuex、pinia</li></ul><h3 id="2、computed与watch的区别？"><a href="#2、computed与watch的区别？" class="headerlink" title="2、computed与watch的区别？"></a>2、computed与watch的区别？</h3><ul><li>computed：多对一，多个值的变化决定一个目标值的变化</li><li>watch：一对多，一个值的变化，引起多个目标值的变化<h3 id="3、Vue的生命周期介绍一下？"><a href="#3、Vue的生命周期介绍一下？" class="headerlink" title="3、Vue的生命周期介绍一下？"></a>3、Vue的生命周期介绍一下？</h3><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/892fde0e56324868921d0e924c84858a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><h3 id="4、Vue的实例加载完成在哪个生命周期呢？"><a href="#4、Vue的实例加载完成在哪个生命周期呢？" class="headerlink" title="4、Vue的实例加载完成在哪个生命周期呢？"></a>4、Vue的实例加载完成在哪个生命周期呢？</h3>beforeCreated<h3 id="5、Vue的真实dom挂载完成在哪个生命周期呢？"><a href="#5、Vue的真实dom挂载完成在哪个生命周期呢？" class="headerlink" title="5、Vue的真实dom挂载完成在哪个生命周期呢？"></a>5、Vue的真实dom挂载完成在哪个生命周期呢？</h3>mounted<h3 id="6、数据更改如何获取最新DOM"><a href="#6、数据更改如何获取最新DOM" class="headerlink" title="6、数据更改如何获取最新DOM"></a>6、数据更改如何获取最新DOM</h3>nextTick<h3 id="7、路由有几种模式，有何区别？"><a href="#7、路由有几种模式，有何区别？" class="headerlink" title="7、路由有几种模式，有何区别？"></a>7、路由有几种模式，有何区别？</h3></li><li>hash模式：监听url中hash的变化来实现不同页面的展示，链接带#</li><li>history模式：url中不带#，利用HTML5的history.pushState方法进行不刷新跳转页面，但需要后端配合404时的重定向</li><li>abstract：使用在非浏览器的环境，例如node环境<h3 id="8、路由有哪些钩子函数？"><a href="#8、路由有哪些钩子函数？" class="headerlink" title="8、路由有哪些钩子函数？"></a>8、路由有哪些钩子函数？</h3>全局钩子</li><li>beforeEach：跳转路由前<ul><li>to：将要跳转进入的路由对象</li><li>from：将要离开的路由对象</li><li>next：一个方法，执行则完成跳转</li></ul></li><li>afterEach：跳转路由后<ul><li>to：将要跳转进入的路由对象</li></ul></li></ul><p>路由独享钩子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">routes<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token operator">:</span> <span class="token string">'/xxx'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> xxx<span class="token punctuation">,</span>    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件内路由钩子</p><ul><li>beforeRouteEnter(to, from, next)：跳转路由渲染组件时触发</li><li>beforeRouteUpdate(to, from, next)：跳转路由且组件被复用时触发</li><li>beforeRouteLeave(to, from, next)：跳转路由且离开组件时出触发</li></ul><p>转载b站up—林三心</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h2&gt;&lt;h3 id=&quot;1、HTML5的新特性？&quot;&gt;&lt;a href=&quot;#1、HTML5的新特性？&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="面试" scheme="https://largefan.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://largefan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="https://largefan.github.io/posts/5.html"/>
    <id>https://largefan.github.io/posts/5.html</id>
    <published>2021-10-08T22:23:11.000Z</published>
    <updated>2022-08-29T11:19:33.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是HTTP？"><a href="#一、什么是HTTP？" class="headerlink" title="一、什么是HTTP？"></a>一、什么是HTTP？</h2><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。即约定, 规则。</p><h2 id="二、请求报文（request）："><a href="#二、请求报文（request）：" class="headerlink" title="二、请求报文（request）："></a>二、请求报文（request）：</h2><pre class="line-numbers language-none"><code class="language-none">行包括三部分：1.请求类型：POST  2.url的路径（写查询字符串、路径）：/s?ie=utf-8  3.（http协议版本）：HTTP/1.1 头格式为:名字:空格值  Host: baidu.com                 Cookie: name=baidu  Content-type: application/x-www-form-urlencoded User-Agent: chrome 83空行体如果是：get请求：请求体为空post请求：请求体不为空 username=admin&amp;password=admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、响应报文（response）"><a href="#三、响应报文（response）" class="headerlink" title="三、响应报文（response）:"></a>三、响应报文（response）:</h2><pre class="line-numbers language-none"><code class="language-none">行1.（http协议版本）：HTTP/1.1            2.(响应状态码)：200            3.(响应状态字符串):OK头Content-Type: text/html;charset=utf-8 Content-length: 2048 Content-encoding: gzip空行体返回结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>响应状态码：</p><blockquote><p>200 - 请求成功，已经正常处理完毕</p><p>301 - 请求永久重定向，转移到其它URL</p><p>302 - 请求临时重定向</p><p>304 - 请求被重定向到客户端本地缓存</p><p>400 - 客户端请求存在语法错误</p><p>401 - 客户端请求没有经过授权</p><p>403 - 客户端的请求被服务器拒绝，一般为客户端没有访问权限</p><p>404 - 客户端请求的URL在服务端不存在</p><p>500 - 服务端永久错误</p></blockquote></blockquote><h2 id="四、GET响应体控制台查看位置："><a href="#四、GET响应体控制台查看位置：" class="headerlink" title="四、GET响应体控制台查看位置："></a>四、GET响应体控制台查看位置：</h2><p><img src="https://s1.imagehub.cc/images/2022/08/29/get.jpg" alt="GET响应体控制台查看位置"></p><h2 id="五、注意：get没有请求体！"><a href="#五、注意：get没有请求体！" class="headerlink" title="五、注意：get没有请求体！"></a>五、注意：get没有请求体！</h2><p><img src="https://s1.imagehub.cc/images/2022/08/29/get46107bd3496f34a0.jpg" alt="get没有请求体"></p><h2 id="六、post请求体控制台查看位置："><a href="#六、post请求体控制台查看位置：" class="headerlink" title="六、post请求体控制台查看位置："></a>六、post请求体控制台查看位置：</h2><p><img src="https://s1.imagehub.cc/images/2022/08/29/post.jpg" alt="post请求体控制台查看位置"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、什么是HTTP？&quot;&gt;&lt;a href=&quot;#一、什么是HTTP？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是HTTP？&quot;&gt;&lt;/a&gt;一、什么是HTTP？&lt;/h2&gt;&lt;p&gt;HTTP（hypertext transport protocol）协议『超</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTTP" scheme="https://largefan.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Ajax的基本使用</title>
    <link href="https://largefan.github.io/posts/4.html"/>
    <id>https://largefan.github.io/posts/4.html</id>
    <published>2021-10-08T21:34:10.000Z</published>
    <updated>2022-08-29T11:12:36.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Ajax简介"><a href="#一、Ajax简介" class="headerlink" title="一、Ajax简介"></a>一、Ajax简介</h2><ol><li><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。</p></li><li><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p></li><li><p>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。</p></li></ol><h2 id="二、XML"><a href="#二、XML" class="headerlink" title="二、XML"></a>二、XML</h2><ol><li><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签。</p></li><li><p>现在已经被 JSON 取代了。</p></li></ol><h2 id="三、Ajax优缺点"><a href="#三、Ajax优缺点" class="headerlink" title="三、Ajax优缺点"></a>三、Ajax优缺点</h2><ul><li><p>Ajax的优点：</p><ol><li>可以无需刷新页面而与服务器端进行通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ol></li><li><p>Ajax的缺点:</p><ol><li><p>没有浏览历史，不能回退</p></li><li><p>存在跨域问题(同源)</p></li><li><p>SEO 不友好</p></li></ol></li></ul><h2 id="三、Ajax-的使用"><a href="#三、Ajax-的使用" class="headerlink" title="三、Ajax 的使用"></a>三、Ajax 的使用</h2><pre class="line-numbers language-none"><code class="language-none">XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。1. 创建 XMLHttpRequest 对象var xhr = new XMLHttpRequest();2.  设置请求信息xhr.open(method, url);//可以设置请求头，一般不设置xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');3. 发送请求           xhr.send(body) //get 请求不传 body 参数，只有 post 请求使用4. 接收响应           //xhr.responseXML 接收 xml 格式的响应数据      //xhr.responseText 接收文本格式的响应数据      xhr.onreadystatechange = function (){if(xhr.readyState == 4 &amp;&amp; xhr.status == 200){var text = xhr.responseText;console.log(text);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Ajax请求状态"><a href="#四、Ajax请求状态" class="headerlink" title="四、Ajax请求状态"></a>四、Ajax请求状态</h2><p><strong>xhr.readyState 可以用来查看请求当前的状态。</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">介绍</a></p><table><thead><tr><th align="center">值</th><th align="center">状态</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">UNSENT</td><td align="center">代理被创建，但尚未调用 open() 方法。</td></tr><tr><td align="center">1</td><td align="center">OPENED</td><td align="center">open() 方法已经被调用。</td></tr><tr><td align="center">2</td><td align="center">HEADERS_RECEIVED</td><td align="center">send() 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td align="center">3</td><td align="center">LOADING</td><td align="center">下载中； responseText 属性已经包含部分数据。</td></tr><tr><td align="center">4</td><td align="center">DONE</td><td align="center">下载操作已完成。</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">0：表示 XMLHttpRequest 实例已经生成，但是 open()方法还没有被调用。1：open() 方法已经被触发。在这个状态中，可以通过  setRequestHeader() 方法来设置请求的头部。2：表示 send()方法已经执行，并且头信息和状态码已经收到。3：表示正在接收服务器传来的 body 部分的数据。（响应体部分正在被接收。如果 responseType 属性是“text”或空字符串， responseText 将会在载入的过程中拥有部分响应数据。）4： 表示服务器数据已经完全接收，或者本次接收已经失败了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、解决-IE-缓存问题"><a href="#五、解决-IE-缓存问题" class="headerlink" title="五、解决 IE  缓存问题"></a>五、解决 IE  缓存问题</h2><blockquote><p>问题：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩<br>余多次请求不会在发送给浏览器而是直接加载缓存中的数据。</p><blockquote><p>解决方式：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址<br>即可避免缓存问题。<br>xhr.open(“get”,”/testAJAX?t=”+Date.now());</p></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Ajax简介&quot;&gt;&lt;a href=&quot;#一、Ajax简介&quot; class=&quot;headerlink&quot; title=&quot;一、Ajax简介&quot;&gt;&lt;/a&gt;一、Ajax简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AJAX 全称为 Asynchronous JavaScript And </summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Ajax" scheme="https://largefan.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Gitee配置与注意事项</title>
    <link href="https://largefan.github.io/posts/3.html"/>
    <id>https://largefan.github.io/posts/3.html</id>
    <published>2021-10-07T16:00:00.000Z</published>
    <updated>2022-08-30T11:25:23.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gitee配置"><a href="#Gitee配置" class="headerlink" title="Gitee配置"></a>Gitee配置</h2><h3 id="一、配置Git操作的用户名、邮箱。"><a href="#一、配置Git操作的用户名、邮箱。" class="headerlink" title="一、配置Git操作的用户名、邮箱。"></a>一、配置Git操作的用户名、邮箱。</h3><pre class="line-numbers language-none"><code class="language-none">1.右键打开Git Bash，输入如下命令：$ git config --global user.name "你的名字或昵称"$ git config --global user.email "你的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、配置ssh公钥："><a href="#二、配置ssh公钥：" class="headerlink" title="二、配置ssh公钥："></a>二、配置ssh公钥：</h3><pre class="line-numbers language-none"><code class="language-none">$ ssh-keygen -t rsa -C "你的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li>如果你的电脑输入过这个命令则会出现：</li></ol><blockquote><pre class="line-numbers language-none"><code class="language-none">Enter file in which to save the key (/c/Users/林子彬/.ssh/id_rsa):/c/Users/林子彬/.ssh/id_rsa already exists.Overwrite (y/n)?翻译过来就是：输入保存密钥的文件（/c/Users）/林子彬/.ssh/id_rsa）：/c/用户/林子彬/.ssh/id_rsa已经存在。是否覆盖（是/否）？解决方法：直接回车不用管，直接执行第3步。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></blockquote><h3 id="三、复制生成的SSH-key。"><a href="#三、复制生成的SSH-key。" class="headerlink" title="三、复制生成的SSH key。"></a>三、复制生成的SSH key。</h3><pre class="line-numbers language-none"><code class="language-none">输入如下命令生成SSH key:$ cat ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、打开Gitee。"><a href="#四、打开Gitee。" class="headerlink" title="四、打开Gitee。"></a>四、打开Gitee。</h3><pre class="line-numbers language-none"><code class="language-none">主页右上角 「个人设置」-&gt;「安全设置」-&gt;「SSH公钥」-&gt;「添加公钥」 ，复制生成的 public key(公钥)，添加到当前账户中。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、测试SSH-key是否配置ok："><a href="#五、测试SSH-key是否配置ok：" class="headerlink" title="五、测试SSH key是否配置ok："></a>五、测试SSH key是否配置ok：</h3><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@gitee.com返回这个即配置成功：Hi 大风扇! You've successfully authenticated, but GITEE.COM does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Gitee注意事项"><a href="#Gitee注意事项" class="headerlink" title="Gitee注意事项"></a>Gitee注意事项</h2><h3 id="一、Git的基本操作："><a href="#一、Git的基本操作：" class="headerlink" title="一、Git的基本操作："></a>一、Git的基本操作：</h3><pre class="line-numbers language-none"><code class="language-none">$ git add .                          #将当前目录所有文件添加到git暂存区$ git commit -m "my commit"          #提交并备注提交信息$ git push                           #将本地提交推送到远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、在Gitee上，下载文件："><a href="#二、在Gitee上，下载文件：" class="headerlink" title="二、在Gitee上，下载文件："></a>二、在Gitee上，下载文件：</h3><pre class="line-numbers language-none"><code class="language-none">$ git clone git@gitee.com:large-fan/basic-use-of-gitee.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意事项：</p><blockquote><ol><li>$ git clone + 你想要下载的仓库地址</li><li>打开==自己账号==下的仓库，点击 “克隆/下载” 按钮，选择 “SSH”, 点击“复制”</li></ol></blockquote></blockquote><h3 id="三、上传文件到-Gitee："><a href="#三、上传文件到-Gitee：" class="headerlink" title="三、上传文件到 Gitee："></a>三、上传文件到 Gitee：</h3><ol><li>如果你想上传文件到gitee仓库，而gitee下载的本地原<strong>文件 又被 删除</strong>，那么你就<strong>只能上gitee把仓库文件下载回本地</strong>，然后才能进行上传<strong>文件操作</strong>（即执行上面的一、代码，即可上传成功）。</li></ol><h3 id="四、总结遇到的问题："><a href="#四、总结遇到的问题：" class="headerlink" title="四、总结遇到的问题："></a>四、总结遇到的问题：</h3><ul><li><p>下载后找不到该文件，经常在github或gitee上下载文件，但是发现这样git clone下后不知道文件给放哪了？（一般是放解决方法1）</p><ol><li>解决方法1：一般情况下会存放在命令行对应的目录下： win + R &gt; cmd 查看命令行地址：C:\Users\林子彬&gt;</li><li>解决方法2：如果想要改变git后的存放地址，直接cd 改变命令行的地址然后再执行下载命令。</li><li>解决方法3：shift+右键，选择打开powershell窗口，然后执行下载命令。</li></ol></li><li><p>删除问题：把本地仓库里的代码一删除后，码云仓库中的代码也跟着删除了。</p><ol><li>解决方法：登录码云代码仓库，点击管理，选择功能设置把禁止仓库同步勾上就行了。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gitee配置&quot;&gt;&lt;a href=&quot;#Gitee配置&quot; class=&quot;headerlink&quot; title=&quot;Gitee配置&quot;&gt;&lt;/a&gt;Gitee配置&lt;/h2&gt;&lt;h3 id=&quot;一、配置Git操作的用户名、邮箱。&quot;&gt;&lt;a href=&quot;#一、配置Git操作的用户名、邮箱</summary>
      
    
    
    
    <category term="Git" scheme="https://largefan.github.io/categories/Git/"/>
    
    
    <category term="Gitee" scheme="https://largefan.github.io/tags/Gitee/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://largefan.github.io/posts/2.html"/>
    <id>https://largefan.github.io/posts/2.html</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-09-12T17:42:33.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><pre class="line-numbers language-none"><code class="language-none">标题：（注意#后面要加一个空格！）# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><pre class="line-numbers language-none"><code class="language-none">斜体字、粗体字、删除内容、短文字：*斜体字***粗体字*****斜体加粗体***~~删除的内容~~ （1.效果看下面）_下划线_ （2.）`短文字` （3.会有灰色背景） &lt;font color=red&gt;字体颜色代码&lt;/font&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.<del>我是删除的内容</del></p><p>2.<em>我是下划线</em></p><p>3.<code>短文字</code></p><p><font color="red">字体颜色代码</font></p><h2 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h2><pre class="line-numbers language-none"><code class="language-none">添加注释：（可不加空格）&gt;注释标题&gt;添加引用内容&gt;&gt;多级注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我是标题</p><blockquote><p>我是注释内容</p><blockquote><blockquote><p>我是多级注释</p></blockquote></blockquote></blockquote></blockquote><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><pre class="line-numbers language-none"><code class="language-none">无序列表：（必加空格）* 无序列表1* 无序列表2* 无序列表2.1（这里按tab键，使层级更加清晰）* 无序列表2.2（这里按tab键，使层级更加清晰）有序列表：（1.然后空格）1. 有序列表12. 有序列表2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无序："><a href="#无序：" class="headerlink" title="无序："></a>无序：</h3><ul><li>我是无序列表1</li><li>我是无序列表2<ul><li>我是无序列表2.1</li><li>我是无序列表2.2</li></ul></li></ul><h3 id="有序："><a href="#有序：" class="headerlink" title="有序："></a>有序：</h3><ol><li><p>我是有序列表1</p></li><li><p> 我是有序列表2</p></li></ol><h2 id="五、复选框"><a href="#五、复选框" class="headerlink" title="五、复选框"></a>五、复选框</h2><pre class="line-numbers language-none"><code class="language-none">复选框：(-然后空格，然后在中括号里面加一个空格，在到外面加空格)- [] 待办事项1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> </li></ul><h2 id="六、分割线"><a href="#六、分割线" class="headerlink" title="六、分割线"></a>六、分割线</h2><pre class="line-numbers language-none"><code class="language-none">分割线：***或者___ (三个下划线)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><hr><h2 id="七、插入代码"><a href="#七、插入代码" class="headerlink" title="七、插入代码"></a>七、插入代码</h2><pre class="line-numbers language-none"><code class="language-none">插入代码：(三个漂号 或 加上语言类型)```或```javascript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、插入图片"><a href="#八、插入图片" class="headerlink" title="八、插入图片"></a>八、插入图片</h2><pre class="line-numbers language-none"><code class="language-none">图片：方式一： 直接拖进来(图片是存在本地的，别人看你文档是看不到你图片的！)方式二： ![图片名称](图片地址url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.imagehub.cc/images/2022/08/27/-4k3840x2160_.jpg" alt="-4k3840x2160_.jpg"></p><h2 id="九、插入网页链接"><a href="#九、插入网页链接" class="headerlink" title="九、插入网页链接"></a>九、插入网页链接</h2><pre class="line-numbers language-none"><code class="language-none">网页链接：先在[]中输入名字,再到括号中输入网址。[链接某个网页]()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://largefan.github.io/">大风扇的博客</a></p><h2 id="十、表格-麻烦，直接右键创建就好了"><a href="#十、表格-麻烦，直接右键创建就好了" class="headerlink" title="十、表格(麻烦，直接右键创建就好了)"></a>十、表格(<font color="red">麻烦，直接右键创建就好了</font>)</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">表格：标题|标题|标题:--:|:--|--:第一个格子|第二个格子|第三个格子第一个内容|第二个内容|第三个内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">标题</th><th align="left">标题</th><th align="right">标题</th></tr></thead><tbody><tr><td align="center">第一个格子</td><td align="left">第二个格子</td><td align="right">第三个格子</td></tr><tr><td align="center">第一个内容</td><td align="left">第二个内容</td><td align="right">第三个内容</td></tr></tbody></table><h2 id="十一、公式"><a href="#十一、公式" class="headerlink" title="十一、公式"></a>十一、公式</h2><pre class="line-numbers language-none"><code class="language-none">公式：$$这里写公式$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>2^3+C_2^2=猜一猜？<br>$$</p><h2 id="十二、目录"><a href="#十二、目录" class="headerlink" title="十二、目录"></a>十二、目录</h2><pre class="line-numbers language-none"><code class="language-none">目录：[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[TOC]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; title=&quot;一、标题&quot;&gt;&lt;/a&gt;一、标题&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-non</summary>
      
    
    
    
    <category term="笔记" scheme="https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="markdown" scheme="https://largefan.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo + github 搭建个人博客</title>
    <link href="https://largefan.github.io/posts/1.html"/>
    <id>https://largefan.github.io/posts/1.html</id>
    <published>2021-09-30T16:00:00.000Z</published>
    <updated>2022-08-28T07:00:30.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-github-搭建个人博客"><a href="#hexo-github-搭建个人博客" class="headerlink" title="hexo + github 搭建个人博客"></a>hexo + github 搭建个人博客</h2><h3 id="1、检查是否安装node、npm、git"><a href="#1、检查是否安装node、npm、git" class="headerlink" title="1、检查是否安装node、npm、git"></a>1、检查是否安装node、npm、git</h3><ul><li>node -v</li><li>npm -v</li><li>git –version</li></ul><h3 id="2、Hexo下载"><a href="#2、Hexo下载" class="headerlink" title="2、Hexo下载"></a>2、Hexo下载</h3><ul><li>npm install hexo-cli -g</li><li>hexo -v</li></ul><h3 id="3、搭建仓库"><a href="#3、搭建仓库" class="headerlink" title="3、搭建仓库"></a>3、搭建仓库</h3><ul><li>仓库名字 要与 账号用户名字一致</li></ul><img src="https://img-blog.csdnimg.cn/85702601d6cd4ed093b7eef6009c60f7.png" style="zoom:67%;"><h3 id="4、创建仓库后，生成ssh-keys"><a href="#4、创建仓库后，生成ssh-keys" class="headerlink" title="4、创建仓库后，生成ssh keys"></a>4、创建仓库后，生成ssh keys</h3><ul><li><p><strong>如未生成过</strong>，则在git bash里输入：ssh-keygen -t rsa -C “邮箱地址”</p></li><li><p>之前<strong>已经生成过</strong>，如图：</p></li></ul><img src="https://img-blog.csdnimg.cn/ff0082f6bba944ac81011df43ac303ec.png" style="zoom:67%;"><ul><li>把公钥填入这里</li></ul><img src="https://img-blog.csdnimg.cn/94ff923ac6204a1ab24d7215af3ce6cc.png" style="zoom:67%;"><h3 id="5、本地生成博客内容"><a href="#5、本地生成博客内容" class="headerlink" title="5、本地生成博客内容"></a>5、本地生成博客内容</h3><ul><li><p>在本地创建一个文件夹**(此时里面什么都没)**，右键打开git bash</p></li><li><p>输入：npm install -g hexo   <!--意思是安装hexo--></p></li><li><p>hexo init  <!--初始化后里面出现躯壳 如图--></p><img src="https://img-blog.csdnimg.cn/a09175981787444cbc16083a6ca365bd.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/46311117c2ad4b5c8fac4602fdfd71a5.png" style="zoom:67%;"></li><li><p>hexo s <code>&lt;!--启动服务器输入：http://localhost:4000/--&gt;</code></p></li><li><p>npm run server <!--启动本地服务器--></p></li></ul><img src="https://img-blog.csdnimg.cn/68e484438dd64bce80c22933481deb7a.png" style="zoom:67%;"><h3 id="6、把博客部署到github"><a href="#6、把博客部署到github" class="headerlink" title="6、把博客部署到github"></a>6、把博客部署到github</h3><ul><li><pre><code>deploy:   type: git   repository: https://github.com/largefan/largefan.github.io.git   branch: main</code></pre></li></ul>  <img src="https://img-blog.csdnimg.cn/dcd838b45e374dc3b67781c30c4e59ee.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/930a94ed832d406eb7202a19f9273399.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/7301aa70bc8a439f8ac62d5b023f9e2b.png" style="zoom:67%;"><ul><li><p>修改完成后，右键打开git bash</p></li><li><p>安装hexo-deployer-git 自动部署发布工具：npm install hexo-deployer-git –save</p></li><li><p>建议先 hexo clean 清理一下</p></li><li><p>然后输入生成页面命令： hexo g</p></li><li><p>然后把本地文件上传到github仓库 命令：hexo d</p></li><li><p>然后令牌没问题就可以访问了：<a href="https://largefan.github.io/">https://largefan.github.io/</a></p><img src="https://img-blog.csdnimg.cn/3857a5af8a48483388b66305f54aadde.png" style="zoom:67%;"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hexo-github-搭建个人博客&quot;&gt;&lt;a href=&quot;#hexo-github-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;hexo + github 搭建个人博客&quot;&gt;&lt;/a&gt;hexo + github 搭建个人博客&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://largefan.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://largefan.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
