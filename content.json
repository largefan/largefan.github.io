{"meta":{"title":"大风扇","subtitle":"largefan","description":"正在学习中！！！","author":"largefan","url":"https://largefan.github.io","root":"/"},"pages":[{"title":"关于本站","date":"2021-06-01T04:00:00.000Z","updated":"2022-08-27T06:24:07.321Z","comments":false,"path":"about/index.html","permalink":"https://largefan.github.io/about/index.html","excerpt":"","text":"自我介绍 熟悉 HTML+CSS+JavaScript，能够写出静态页面及动态页面。 熟悉 微信小程序 ，前端页面的开发。 熟悉 Photoshop、pr 的基本使用。 了解 node.js、es6、vue2的使用。"},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2021-07-26T14:44:28.785Z","comments":false,"path":"categories/index.html","permalink":"https://largefan.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-10-01T02:11:28.000Z","updated":"2022-08-27T16:53:35.447Z","comments":false,"path":"comments/index.html","permalink":"https://largefan.github.io/comments/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-27T12:40:24.587Z","comments":true,"path":"archives/index.html","permalink":"https://largefan.github.io/archives/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2021-07-26T14:44:42.337Z","comments":false,"path":"tags/index.html","permalink":"https://largefan.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-07-27T07:31:10.990Z","comments":true,"path":"link/index.html","permalink":"https://largefan.github.io/link/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2021-07-26T13:06:52.537Z","comments":true,"path":"music/index.html","permalink":"https://largefan.github.io/music/index.html","excerpt":"","text":""},{"title":"相册（因为图片为4k所以加载慢）","date":"2022-08-27T15:26:07.551Z","updated":"2022-08-27T15:26:07.551Z","comments":false,"path":"List/gallery/index.html","permalink":"https://largefan.github.io/List/gallery/index.html","excerpt":"","text":"one 美女 two 风景"},{"title":"","date":"2019-08-10T08:41:10.000Z","updated":"2022-08-27T05:11:40.497Z","comments":false,"path":"List/movies/index.html","permalink":"https://largefan.github.io/List/movies/index.html","excerpt":"","text":"必杀技"},{"title":"","date":"2021-09-28T14:56:14.000Z","updated":"2022-08-27T05:44:23.733Z","comments":false,"path":"List/gallery/fengjing/index.html","permalink":"https://largefan.github.io/List/gallery/fengjing/index.html","excerpt":"","text":""},{"title":"Music-BBOX","date":"2020-04-23T04:58:56.000Z","updated":"2022-08-27T05:00:48.828Z","comments":false,"path":"List/music/index.html","permalink":"https://largefan.github.io/List/music/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2022-08-27T05:49:09.229Z","comments":false,"path":"List/gallery/meiren/index.html","permalink":"https://largefan.github.io/List/gallery/meiren/index.html","excerpt":"","text":""}],"posts":[{"title":"前端面试题","slug":"面试","date":"2021-10-09T16:00:00.000Z","updated":"2022-08-28T07:01:40.965Z","comments":true,"path":"posts/100.html","link":"","permalink":"https://largefan.github.io/posts/100.html","excerpt":"","text":"HTML51、HTML5的新特性？ 1、语义化标签，比如header、footer、nav、aside、article、section 2、音视频，比如audio、video 3、画布canvas、矢量图svg 3、画布，canvas的api有getContext、fillStyle、fillRect等 4、本地存储localStorage、sessionStorage 5、web worker2、语义化的好处？ 1、代码分块清晰，便于维护 2、页面结构清晰，便于浏览器。搜索引擎解析 3、利于搜索引擎的爬取，利于SEO3、canvas的常用api有哪些？ getContext：返回一个指定canvas的绘画环境对象 beginPath：开始绘制 moveTo：移动画笔位置 lineTo：用来画线段 stroke：用来实施绘制的操作 lineStyle：设置线段的样式 closePath：结束绘制4、web worker有什么作用？应用场景有哪些？开启一个子线程，且子线程的操作不受线程的影响 大数据处理 耗费时间较长的操作5、浏览器本地缓存localStorage与sessionStorage的区别？ 生命周期不同：前者一直存在浏览器，除非用户手动清除，后者生命周期结束于浏览器或者tab页的关闭 CSS31、有哪些新特性呢？flex、animation、transform、border-radius、box-shadow、opacity 2、背景毛玻璃的效果如何实现呢？filter：blur() 3、position有哪几种呢？ static：默认 relative：相对于自身 absolute：相对于最近的一个非static的祖先级元素进行定位 fixed：相对于屏幕窗口进行定位 sticky：用来实现吸顶效果4、如何自己实现跟position：sticky的效果？使用getBoundingClientRect或者IntersectionObserver计算指定元素位置，到达一定距离更改指定元素定位为fixed，从而实现sticky的效果5、重绘回流是什么呢？文章链接6、怎么降低重绘回流的次数呢？文章链接7、flex布局如何更改主轴方向？设置flex-direction样式属性8、flex布局如何允许换行呢？设置flex-wrap样式属性9、flex布局实现水平垂直据居中？设置justify-content和align-items都为center10、flex：1的原理是什么呢？flex-grow 、flex-shrink 、flex-basis这三个样式的合集，全写状态为flex:0 1 auto，简写为flex: 111、rem与em的区别是什么呢？ rem：相对于标签的font-size去决定大小，例如html标签font-size为14px，则2rem === 28px em：相对于自身的font-size去决定大小，自身没有font-size则继承祖先级元素的font-size JavaScript1、原型链是什么呢？有什么作用吗 原型链：原型链是一条对象隐式原型不断往上指向的一条指向链，尽头是Object的隐式原型，也就是null 作用：构造函数原型上的东西可以让实例们共享，从而节省了空间2、闭包是什么？有什么优缺点闭包是一个能让函数外部访问到函数内部的一个函数 优点是：延长函数内部变量的寿命，使函数外部能访问到函数内部 缺点是：滥用闭包导致内存溢出，页面卡顿3、JavaScript总共有几种数据类型？字符串、布尔值、数值、undefined、null、object、symbol、bigInt4、JavaScript判断类型的方式是什么？ typeof：只能判断 字符串、布尔值、数值、undefined、function、object、symbol、bigInt，不能区分判断 数组、null、对象 A instanceof B：判断A是否为B的实例对象，从而判断A是否为B类型 Object.prototype.toString.call()：可以判断所有的数据类型6、JavaScript不同类型的存储方式有何区别？普遍认为 基础数据类型存于栈内存 引用数据类型存于堆内存我认为 所有数据都存于堆内存，栈内存只存指针7、你说字符串存储在栈内存，那如果字符串很长。超过了栈内存最大容量呢？所以说我觉得所有数据都存于堆内存，毕竟栈内存容量有限。8、call、apply、bind的区别？ call于apply的区别在于传参，前者直接传参，后者传一个数组 bind传参后不立即执行，而是会返回一个函数，这个函数可以继续传参，且执行（bind函数可以分两次传参）9、bind返回的函数能作为构造函数吗？不能哦，会报错的10、赋值、深拷贝与浅拷贝有什么不同？ 赋值：赋值指针指向，还是用的同一个内存空间 浅拷贝：只拷贝第一层 深拷贝：所有层都会进行拷贝11、怎么判断一个对象有环引用呢？定义一个空数组，且对于目标对象进行递归，每次都判断递归项是否为对象，是的话放进数组，且每次判断属性值是否在数组里，在的话说明环引用了function cycleDetector(obj) { const arr = [obj] let flag = false function cycle(o) { const keys = Object.keys(o) for (const key of keys) { const temp = o[key] if (typeof temp === 'object' &amp;&amp; temp !== null) { if (arr.indexOf(temp) &gt;= 0) { flag = true return } arr.push(temp) cycle(temp) } } } cycle(obj) return flag } ES61、let、const的暂时性死区问题？在一个作用域里如果存在let、const定义的一个变量之前使用该变量，则报错“cannot access xx before initialization” 2、Promise的then为什么可以链式调用？Promise的then方法返回一个新的Promise对象，保证了then方法可以进行链式调用 3、async/await的用法？ async/await的作用是：以同步的方式执行异步操作，实现排队效果 async：async函数执行返回一个Promise await：await后接Promise则会等待Promise返回结果，接普通函数执行则会接收返回结果 await只能在async中使用，但是浏览器调试中await可单独使用4、Class的静态属性、继承？ 静态属性：static关键字定义的变量属性，只能通过Class构造函数的属性的方式去访问 继承：使用 Child extends Father {}，且配合super对象，完成继承Vue 1、Vue与React的区别在哪？比较的是Vue2相同点： 1.都使用了虚拟dom 2.组件化开发 3.都是单向数据流(父子组件之间，不建议子修改父传下来的数据) 4.都支持服务端渲染不同点： 1.React的JSX，Vue的template 2.数据变化，React手动(setState)，Vue自动(初始化已响应式处理，Object.defineProperty，Proxy) 3.React单向绑定，Vue双向绑定 4.React的Redux、mobx，Vue的Vuex、pinia 2、computed与watch的区别？ computed：多对一，多个值的变化决定一个目标值的变化 watch：一对多，一个值的变化，引起多个目标值的变化3、Vue的生命周期介绍一下？4、Vue的实例加载完成在哪个生命周期呢？beforeCreated5、Vue的真实dom挂载完成在哪个生命周期呢？mounted6、数据更改如何获取最新DOMnextTick7、路由有几种模式，有何区别？ hash模式：监听url中hash的变化来实现不同页面的展示，链接带# history模式：url中不带#，利用HTML5的history.pushState方法进行不刷新跳转页面，但需要后端配合404时的重定向 abstract：使用在非浏览器的环境，例如node环境8、路由有哪些钩子函数？全局钩子 beforeEach：跳转路由前 to：将要跳转进入的路由对象 from：将要离开的路由对象 next：一个方法，执行则完成跳转 afterEach：跳转路由后 to：将要跳转进入的路由对象 路由独享钩子 routes: [ { path: '/xxx', component: xxx, beforeEnter: (to, from, next) =&gt; { } } ] 组件内路由钩子 beforeRouteEnter(to, from, next)：跳转路由渲染组件时触发 beforeRouteUpdate(to, from, next)：跳转路由且组件被复用时触发 beforeRouteLeave(to, from, next)：跳转路由且离开组件时出触发 转载b站up—林三心","categories":[{"name":"面试","slug":"面试","permalink":"https://largefan.github.io/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://largefan.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"HTTP","slug":"HTTP","date":"2021-10-08T22:23:11.000Z","updated":"2022-08-29T11:09:23.913Z","comments":true,"path":"posts/5.html","link":"","permalink":"https://largefan.github.io/posts/5.html","excerpt":"","text":"一、什么是HTTP？HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。即约定, 规则。 二、请求报文（request）：行 包括三部分： 1.请求类型：POST 2.url的路径（写查询字符串、路径）：/s?ie=utf-8 3.（http协议版本）：HTTP/1.1 头 格式为:名字:空格值 Host: baidu.com Cookie: name=baidu Content-type: application/x-www-form-urlencoded User-Agent: chrome 83 空行 体 如果是： get请求：请求体为空 post请求：请求体不为空 username=admin&amp;password=admin 三、响应报文（response）:行 1.（http协议版本）：HTTP/1.1 2.(响应状态码)：200 3.(响应状态字符串):OK 头 Content-Type: text/html;charset=utf-8 Content-length: 2048 Content-encoding: gzip 空行 体 返回结果 响应状态码： 200 - 请求成功，已经正常处理完毕 301 - 请求永久重定向，转移到其它URL 302 - 请求临时重定向 304 - 请求被重定向到客户端本地缓存 400 - 客户端请求存在语法错误 401 - 客户端请求没有经过授权 403 - 客户端的请求被服务器拒绝，一般为客户端没有访问权限 404 - 客户端请求的URL在服务端不存在 500 - 服务端永久错误 四、GET响应体控制台查看位置： 五、注意：get没有请求体！ 六、post请求体控制台查看位置：","categories":[{"name":"笔记","slug":"笔记","permalink":"https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://largefan.github.io/tags/HTTP/"}]},{"title":"Ajax的基本使用","slug":"Ajax的基本使用","date":"2021-10-08T21:34:10.000Z","updated":"2022-08-29T11:12:36.798Z","comments":true,"path":"posts/4.html","link":"","permalink":"https://largefan.github.io/posts/4.html","excerpt":"","text":"一、Ajax简介 AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。 AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。 通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 二、XML XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签。 现在已经被 JSON 取代了。 三、Ajax优缺点 Ajax的优点： 可以无需刷新页面而与服务器端进行通信。 允许你根据用户事件来更新部分页面内容。 Ajax的缺点: 没有浏览历史，不能回退 存在跨域问题(同源) SEO 不友好 三、Ajax 的使用XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。 1. 创建 XMLHttpRequest 对象 var xhr = new XMLHttpRequest(); 2. 设置请求信息 xhr.open(method, url); //可以设置请求头，一般不设置 xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); 3. 发送请求 xhr.send(body) //get 请求不传 body 参数，只有 post 请求使用 4. 接收响应 //xhr.responseXML 接收 xml 格式的响应数据 //xhr.responseText 接收文本格式的响应数据 xhr.onreadystatechange = function (){ if(xhr.readyState == 4 &amp;&amp; xhr.status == 200){ var text = xhr.responseText; console.log(text); } } 四、Ajax请求状态xhr.readyState 可以用来查看请求当前的状态。 介绍 值 状态 描述 0 UNSENT 代理被创建，但尚未调用 open() 方法。 1 OPENED open() 方法已经被调用。 2 HEADERS_RECEIVED send() 方法已经被调用，并且头部和状态已经可获得。 3 LOADING 下载中； responseText 属性已经包含部分数据。 4 DONE 下载操作已完成。 0：表示 XMLHttpRequest 实例已经生成，但是 open()方法还没有被调用。 1：open() 方法已经被触发。在这个状态中，可以通过 setRequestHeader() 方法来设置请求的头部。 2：表示 send()方法已经执行，并且头信息和状态码已经收到。 3：表示正在接收服务器传来的 body 部分的数据。（响应体部分正在被接收。如果 responseType 属性是“text”或空字符串， responseText 将会在载入的过程中拥有部分响应数据。） 4： 表示服务器数据已经完全接收，或者本次接收已经失败了。 五、解决 IE 缓存问题 问题：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。 解决方式：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址即可避免缓存问题。xhr.open(“get”,”/testAJAX?t=”+Date.now());","categories":[{"name":"笔记","slug":"笔记","permalink":"https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://largefan.github.io/tags/Ajax/"}]},{"title":"Gitee配置与注意事项","slug":"Gitee配置与注意事项","date":"2021-10-07T16:00:00.000Z","updated":"2022-08-29T03:00:02.225Z","comments":true,"path":"posts/3.html","link":"","permalink":"https://largefan.github.io/posts/3.html","excerpt":"","text":"Gitee配置一、配置Git操作的用户名、邮箱。1.右键打开Git Bash，输入如下命令： $ git config --global user.name \"你的名字或昵称\" $ git config --global user.email \"你的邮箱\" 二、配置ssh公钥：$ ssh-keygen -t rsa -C \"你的邮箱\" 如果你的电脑输入过这个命令则会出现： Enter file in which to save the key (/c/Users/林子彬/.ssh/id_rsa):/c/Users/林子彬/.ssh/id_rsa already exists.Overwrite (y/n)? 翻译过来就是： 输入保存密钥的文件（/c/Users）/林子彬/.ssh/id_rsa）：/c/用户/林子彬/.ssh/id_rsa已经存在。是否覆盖（是/否）？ 解决方法：直接回车不用管，直接执行第3步。 三、复制生成的SSH key。输入如下命令生成SSH key: $ cat ~/.ssh/id_rsa.pub 四、打开Gitee。主页右上角 「个人设置」-&gt;「安全设置」-&gt;「SSH公钥」-&gt;「添加公钥」 ，复制生成的 public key(公钥)，添加到当前账户中。 五、测试SSH key是否配置ok：$ ssh -T git@gitee.com 返回这个即配置成功： Hi 大风扇! You've successfully authenticated, but GITEE.COM does not provide shell access. Gitee注意事项一、Git的基本操作：$ git add . #将当前目录所有文件添加到git暂存区 $ git commit -m \"my commit\" #提交并备注提交信息 $ git push #将本地提交推送到远程仓库 二、在Gitee上，下载文件：$ git clone git@gitee.com:large-fan/basic-use-of-gitee.git 注意事项： $ git clone + 你想要下载的仓库地址 打开==自己账号==下的仓库，点击 “克隆/下载” 按钮，选择 “SSH”, 点击“复制” 三、上传文件到 Gitee： 如果你想上传文件到gitee仓库，而gitee下载的本地原文件 又被 删除，那么你就只能上gitee把仓库文件下载回本地，然后才能进行上传文件操作（即执行上面的一、代码，即可上传成功）。 四、总结遇到的问题： 下载后找不到该文件，经常在github或gitee上下载文件，但是发现这样git clone下后不知道文件给放哪了？（一般是放解决方法1） 解决方法1：一般情况下会存放在命令行对应的目录下： win + R &gt; cmd 查看命令行地址：C:\\Users\\林子彬&gt; 解决方法2：如果想要改变git后的存放地址，直接cd 改变命令行的地址然后再执行下载命令。 解决方法3：shift+右键，选择打开powershell窗口，然后执行下载命令。 删除问题：把本地仓库里的代码一删除后，码云仓库中的代码也跟着删除了。 解决方法：登录码云代码仓库，点击管理，选择功能设置把禁止仓库同步勾上就行了。","categories":[{"name":"Git","slug":"Git","permalink":"https://largefan.github.io/categories/Git/"}],"tags":[{"name":"Gitee","slug":"Gitee","permalink":"https://largefan.github.io/tags/Gitee/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2021-10-05T16:00:00.000Z","updated":"2022-08-28T07:16:54.229Z","comments":true,"path":"posts/2.html","link":"","permalink":"https://largefan.github.io/posts/2.html","excerpt":"","text":"一、标题标题：（注意#后面要加一个空格！） # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 二、字体斜体字、粗体字、删除内容、短文字： *斜体字* **粗体字** ***斜体加粗体*** ~~删除的内容~~ （1.效果看下面） _下划线_ （2.） `短文字` （3.会有灰色背景） 1.我是删除的内容 2.我是下划线 3.短文字 三、注释添加注释：（可不加空格） &gt;注释标题 &gt;添加引用内容 &gt;&gt;多级注释 我是标题 我是注释内容 我是多级注释 四、列表无序列表：（必加空格） * 无序列表1 * 无序列表2 * 无序列表2.1（这里按tab键，使层级更加清晰） * 无序列表2.2（这里按tab键，使层级更加清晰） 有序列表：（1.然后空格） 1. 有序列表1 2. 有序列表2 无序： 我是无序列表1 我是无序列表2 我是无序列表2.1 我是无序列表2.2 有序： 我是有序列表1 我是有序列表2 五、复选框复选框：(-然后空格，然后在中括号里面加一个空格，在到外面加空格) - [] 待办事项1 六、分割线分割线： ***或者___ (三个下划线) 七、插入代码插入代码：(三个漂号 或 加上语言类型) ```或```javascript 八、插入图片图片： 方式一： 直接拖进来(图片是存在本地的，别人看你文档是看不到你图片的！) 方式二： ![图片名称](图片地址url) 九、插入网页链接网页链接：先在[]中输入名字,再到括号中输入网址。 [链接某个网页]() 大风扇的博客 十、表格(麻烦，直接右键创建就好了)表格： 标题|标题|标题 :--:|:--|--: 第一个格子|第二个格子|第三个格子 第一个内容|第二个内容|第三个内容 标题 标题 标题 第一个格子 第二个格子 第三个格子 第一个内容 第二个内容 第三个内容 十一、公式公式： $$ 这里写公式 $$ $$2^3+C_2^2=猜一猜？$$ 十二、目录目录： [TOC] [TOC]","categories":[{"name":"笔记","slug":"笔记","permalink":"https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://largefan.github.io/tags/markdown/"}]},{"title":"hexo + github 搭建个人博客","slug":"hexo + github 搭建个人博客","date":"2021-09-30T16:00:00.000Z","updated":"2022-08-28T07:00:30.485Z","comments":true,"path":"posts/1.html","link":"","permalink":"https://largefan.github.io/posts/1.html","excerpt":"","text":"hexo + github 搭建个人博客1、检查是否安装node、npm、git node -v npm -v git –version 2、Hexo下载 npm install hexo-cli -g hexo -v 3、搭建仓库 仓库名字 要与 账号用户名字一致 4、创建仓库后，生成ssh keys 如未生成过，则在git bash里输入：ssh-keygen -t rsa -C “邮箱地址” 之前已经生成过，如图： 把公钥填入这里 5、本地生成博客内容 在本地创建一个文件夹**(此时里面什么都没)**，右键打开git bash 输入：npm install -g hexo hexo init hexo s &lt;!--启动服务器输入：http://localhost:4000/--&gt; npm run server 6、把博客部署到github deploy: type: git repository: https://github.com/largefan/largefan.github.io.git branch: main 修改完成后，右键打开git bash 安装hexo-deployer-git 自动部署发布工具：npm install hexo-deployer-git –save 建议先 hexo clean 清理一下 然后输入生成页面命令： hexo g 然后把本地文件上传到github仓库 命令：hexo d 然后令牌没问题就可以访问了：https://largefan.github.io/","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://largefan.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://largefan.github.io/tags/hexo/"}]}],"categories":[{"name":"面试","slug":"面试","permalink":"https://largefan.github.io/categories/%E9%9D%A2%E8%AF%95/"},{"name":"笔记","slug":"笔记","permalink":"https://largefan.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"Git","slug":"Git","permalink":"https://largefan.github.io/categories/Git/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://largefan.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://largefan.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"HTTP","slug":"HTTP","permalink":"https://largefan.github.io/tags/HTTP/"},{"name":"Ajax","slug":"Ajax","permalink":"https://largefan.github.io/tags/Ajax/"},{"name":"Gitee","slug":"Gitee","permalink":"https://largefan.github.io/tags/Gitee/"},{"name":"markdown","slug":"markdown","permalink":"https://largefan.github.io/tags/markdown/"},{"name":"hexo","slug":"hexo","permalink":"https://largefan.github.io/tags/hexo/"}]}